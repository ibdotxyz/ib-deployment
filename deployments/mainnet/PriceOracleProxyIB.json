{
  "address": "0xD5734c42E2e593933231bE61BAc2B94ACdc44DC4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "v1PriceOracle_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reference_",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quote",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isUsed",
          "type": "bool"
        }
      ],
      "name": "AggregatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDeprecated",
          "type": "bool"
        }
      ],
      "name": "DeprecatedMarketUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isUsed",
          "type": "bool"
        }
      ],
      "name": "ReferenceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "SetGuardian",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ARS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "AUD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "BRL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "BTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CAD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CHF",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CNY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "EUR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "GBP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "INR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "JPY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "KRW",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "NGN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "NZD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PHP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "QUOTE_SYMBOL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "RUB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "SGD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "USD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ZAR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "_disableAggregator",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "_disableReference",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "_enableAggregator",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "_enableReference",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "_setAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "bases",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "quotes",
          "type": "address[]"
        }
      ],
      "name": "_setAggregators",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        }
      ],
      "name": "_setGuardian",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        }
      ],
      "name": "_setReferences",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "deprecated",
          "type": "bool[]"
        }
      ],
      "name": "_updateDeprecatedMarkets",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aggregators",
      "outputs": [
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quote",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isUsed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deprecatedMarkets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ref",
      "outputs": [
        {
          "internalType": "contract StdReferenceInterface",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "references",
      "outputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isUsed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "reg",
      "outputs": [
        {
          "internalType": "contract FeedRegistryInterface",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "v1PriceOracle",
      "outputs": [
        {
          "internalType": "contract V1PriceOracleInterface",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x295460bea7d8aac5ffe7fc818a97f558f6c437fa5021b6cfcc335d22ffd3b1f0",
  "receipt": {
    "to": null,
    "from": "0x1BA608D6a354fbEb41FD7cC799e7f09b2612AB26",
    "contractAddress": "0xD5734c42E2e593933231bE61BAc2B94ACdc44DC4",
    "transactionIndex": 119,
    "gasUsed": "2602138",
    "logsBloom": "0x
    "blockHash": "0x968d3c3f4a69951105b143ab231e685fdd84474357450e970a9870bfc1785fa4",
    "transactionHash": "0x295460bea7d8aac5ffe7fc818a97f558f6c437fa5021b6cfcc335d22ffd3b1f0",
    "logs": [],
    "blockNumber": 15445072,
    "cumulativeGasUsed": "15515160",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA5fC0BbfcD05827ed582869b7254b6f141BA84Eb",
    "0x3aBce8F1DB258fBc64827b0926e14A0F90525CF7",
    "0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf",
    "0xDA7a001b254CD22e46d3eAB04d937489c93174C3"
  ],
  "numDeployments": 1,
  "solcInputHash": "e68b9c2178841d0d8dfc2712afc0f685",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v1PriceOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reference_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"}],\"name\":\"AggregatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDeprecated\",\"type\":\"bool\"}],\"name\":\"DeprecatedMarketUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"}],\"name\":\"ReferenceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"SetGuardian\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ARS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AUD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BRL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CNY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EUR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GBP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JPY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KRW\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NGN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NZD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"QUOTE_SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RUB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SGD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ZAR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"_disableAggregator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"_disableReference\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"_enableAggregator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"_enableReference\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"_setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bases\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"quotes\",\"type\":\"address[]\"}],\"name\":\"_setAggregators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"_setGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"_setReferences\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"deprecated\",\"type\":\"bool[]\"}],\"name\":\"_updateDeprecatedMarkets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aggregators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deprecatedMarkets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ref\",\"outputs\":[{\"internalType\":\"contract StdReferenceInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"references\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reg\",\"outputs\":[{\"internalType\":\"contract FeedRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v1PriceOracle\",\"outputs\":[{\"internalType\":\"contract V1PriceOracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"_disableAggregator(address)\":{\"params\":{\"tokenAddress\":\"The underlying token\"}},\"_disableReference(address)\":{\"params\":{\"tokenAddress\":\"The underlying token\"}},\"_enableAggregator(address)\":{\"params\":{\"tokenAddress\":\"The underlying token\"}},\"_enableReference(address)\":{\"params\":{\"tokenAddress\":\"The underlying token\"}},\"_setAdmin(address)\":{\"params\":{\"_admin\":\"The new admin\"}},\"_setAggregators(address[],address[],address[])\":{\"params\":{\"bases\":\"The list of ChainLink aggregator bases\",\"quotes\":\"The list of ChainLink aggregator quotes, currently support 'ETH' and 'USD'\",\"tokenAddresses\":\"The list of underlying tokens\"}},\"_setGuardian(address)\":{\"params\":{\"_guardian\":\"The new guardian\"}},\"_setReferences(address[],string[])\":{\"params\":{\"symbols\":\"The list of symbols used by Band reference\",\"tokenAddresses\":\"The list of underlying tokens\"}},\"_updateDeprecatedMarkets(address[],bool[])\":{\"params\":{\"deprecated\":\"The list of tokens are deprecated or not\",\"tokenAddresses\":\"The list of underlying tokens\"}},\"constructor\":{\"params\":{\"admin_\":\"The address of admin to set aggregators\",\"reference_\":\"The address of Band reference\",\"registry_\":\"The address of ChainLink registry\",\"v1PriceOracle_\":\"The v1 price oracle\"}},\"getUnderlyingPrice(address)\":{\"params\":{\"cToken\":\"The cToken to get the underlying price of\"},\"return\":\"The underlying asset price mantissa (scaled by 1e18)\"}}},\"userdoc\":{\"methods\":{\"_disableAggregator(address)\":{\"notice\":\"Disable ChainLink aggregator\"},\"_disableReference(address)\":{\"notice\":\"Disable Band reference\"},\"_enableAggregator(address)\":{\"notice\":\"Enable ChainLink aggregator\"},\"_enableReference(address)\":{\"notice\":\"Enable Band reference\"},\"_setAdmin(address)\":{\"notice\":\"Set admin for price oracle proxy\"},\"_setAggregators(address[],address[],address[])\":{\"notice\":\"Set ChainLink aggregators for multiple tokens\"},\"_setGuardian(address)\":{\"notice\":\"Set guardian for price oracle proxy\"},\"_setReferences(address[],string[])\":{\"notice\":\"Set Band references for multiple tokens\"},\"_updateDeprecatedMarkets(address[],bool[])\":{\"notice\":\"Update deprecated markets for multiple tokens\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a listed cToken asset\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracle/PriceOracleProxyIB.sol\":\"PriceOracleProxyIB\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CErc20.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ncontract CErc20 is CToken, CErc20Interface {\\n    /**\\n     * @notice Initialize the new money market\\n     * @param underlying_ The address of the underlying asset\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ ERC-20 name of this token\\n     * @param symbol_ ERC-20 symbol of this token\\n     * @param decimals_ ERC-20 decimal precision of this token\\n     */\\n    function initialize(\\n        address underlying_,\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint256 initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        // CToken initialize does the bulk of the work\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\n\\n        // Set underlying and sanity check it\\n        underlying = underlying_;\\n        EIP20Interface(underlying).totalSupply();\\n    }\\n\\n    /*** User Interface ***/\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function mint(uint256 mintAmount) external returns (uint256) {\\n        (uint256 err, ) = mintInternal(mintAmount, false);\\n        require(err == 0, \\\"mint failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeem(uint256 redeemTokens) external returns (uint256) {\\n        require(redeemInternal(redeemTokens, false) == 0, \\\"redeem failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256) {\\n        require(redeemUnderlyingInternal(redeemAmount, false) == 0, \\\"redeem underlying failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrow(uint256 borrowAmount) external returns (uint256) {\\n        require(borrowInternal(borrowAmount, false) == 0, \\\"borrow failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrow(uint256 repayAmount) external returns (uint256) {\\n        (uint256 err, ) = repayBorrowInternal(repayAmount, false);\\n        require(err == 0, \\\"repay failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256) {\\n        (uint256 err, ) = repayBorrowBehalfInternal(borrower, repayAmount, false);\\n        require(err == 0, \\\"repay behalf failed\\\");\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) external returns (uint256) {\\n        (uint256 err, ) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral, false);\\n        require(err == 0, \\\"liquidate borrow failed\\\");\\n    }\\n\\n    /**\\n     * @notice The sender adds to reserves.\\n     * @param addAmount The amount fo underlying token to add as reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReserves(uint256 addAmount) external returns (uint256) {\\n        require(_addReservesInternal(addAmount, false) == 0, \\\"add reserves failed\\\");\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying tokens owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint256) {\\n        EIP20Interface token = EIP20Interface(underlying);\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n     *      This will revert due to insufficient balance or insufficient allowance.\\n     *      This function returns the actual amount received,\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\n     *\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferIn(\\n        address from,\\n        uint256 amount,\\n        bool isNative\\n    ) internal returns (uint256) {\\n        isNative; // unused\\n\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\n        uint256 balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\n        token.transferFrom(from, address(this), amount);\\n\\n        bool success;\\n        assembly {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        require(success, \\\"transfer failed\\\");\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\n        return sub_(balanceAfter, balanceBefore);\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\n     *      it is >= amount, this should not revert in normal conditions.\\n     *\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferOut(\\n        address payable to,\\n        uint256 amount,\\n        bool isNative\\n    ) internal {\\n        isNative; // unused\\n\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\n        token.transfer(to, amount);\\n\\n        bool success;\\n        assembly {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        require(success, \\\"transfer failed\\\");\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(\\n        address spender,\\n        address src,\\n        address dst,\\n        uint256 tokens\\n    ) internal returns (uint256) {\\n        /* Fail if transfer not allowed */\\n        require(comptroller.transferAllowed(address(this), src, dst, tokens) == 0, \\\"rejected\\\");\\n\\n        /* Do not allow self-transfers */\\n        require(src != dst, \\\"bad input\\\");\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint256 startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint256(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        accountTokens[src] = sub_(accountTokens[src], tokens);\\n        accountTokens[dst] = add_(accountTokens[dst], tokens);\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint256(-1)) {\\n            transferAllowances[src][spender] = sub_(startingAllowance, tokens);\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Get the account's cToken balances\\n     * @param account The address of the account\\n     */\\n    function getCTokenBalanceInternal(address account) internal view returns (uint256) {\\n        return accountTokens[account];\\n    }\\n\\n    struct MintLocalVars {\\n        uint256 exchangeRateMantissa;\\n        uint256 mintTokens;\\n        uint256 actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(\\n        address minter,\\n        uint256 mintAmount,\\n        bool isNative\\n    ) internal returns (uint256, uint256) {\\n        /* Fail if mint not allowed */\\n        require(comptroller.mintAllowed(address(this), minter, mintAmount) == 0, \\\"rejected\\\");\\n\\n        /*\\n         * Return if mintAmount is zero.\\n         * Put behind `mintAllowed` for accruing potential COMP rewards.\\n         */\\n        if (mintAmount == 0) {\\n            return (uint256(Error.NO_ERROR), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), \\\"market is stale\\\");\\n\\n        MintLocalVars memory vars;\\n\\n        vars.exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount, isNative);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n        vars.mintTokens = div_ScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupply = totalSupply + mintTokens\\n         *  accountTokens[minter] = accountTokens[minter] + mintTokens\\n         */\\n        totalSupply = add_(totalSupply, vars.mintTokens);\\n        accountTokens[minter] = add_(accountTokens[minter], vars.mintTokens);\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint256(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        uint256 exchangeRateMantissa;\\n        uint256 redeemTokens;\\n        uint256 redeemAmount;\\n        uint256 totalSupplyNew;\\n        uint256 accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block. Only one of redeemTokensIn or redeemAmountIn may be non-zero and it would do nothing if both are zero.\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(\\n        address payable redeemer,\\n        uint256 redeemTokensIn,\\n        uint256 redeemAmountIn,\\n        bool isNative\\n    ) internal returns (uint256) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"bad input\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        vars.exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n            vars.redeemAmount = mul_ScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n            vars.redeemTokens = div_ScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        require(comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens) == 0, \\\"rejected\\\");\\n\\n        /*\\n         * Return if redeemTokensIn and redeemAmountIn are zero.\\n         * Put behind `redeemAllowed` for accruing potential COMP rewards.\\n         */\\n        if (redeemTokensIn == 0 && redeemAmountIn == 0) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), \\\"market is stale\\\");\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        vars.totalSupplyNew = sub_(totalSupply, vars.redeemTokens);\\n        vars.accountTokensNew = sub_(accountTokens[redeemer], vars.redeemTokens);\\n\\n        /* Reverts if protocol has insufficient cash */\\n        require(getCashPrior() >= vars.redeemAmount, \\\"insufficient cash\\\");\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount, isNative);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) internal returns (uint256) {\\n        /* Fail if seize not allowed */\\n        require(\\n            comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens) == 0,\\n            \\\"rejected\\\"\\n        );\\n\\n        /*\\n         * Return if seizeTokens is zero.\\n         * Put behind `seizeAllowed` for accruing potential COMP rewards.\\n         */\\n        if (seizeTokens == 0) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        require(borrower != liquidator, \\\"invalid account pair\\\");\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        accountTokens[borrower] = sub_(accountTokens[borrower], seizeTokens);\\n        accountTokens[liquidator] = add_(accountTokens[liquidator], seizeTokens);\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n}\\n\",\"keccak256\":\"0xb37a4232301d52397ea0301afabd29674a2168bff75a953ac0ad8497be683455\"},\"contracts/CToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint256 initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        require(msg.sender == admin, \\\"admin only\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"initialized\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"invalid exchange rate\\\");\\n\\n        // Set the comptroller\\n        uint256 err = _setComptroller(comptroller_);\\n        require(err == uint256(Error.NO_ERROR), \\\"set comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint256(Error.NO_ERROR), \\\"set IRM failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint256) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 cTokenBalance = getCTokenBalanceInternal(account);\\n        uint256 borrowBalance = borrowBalanceStoredInternal(account);\\n        uint256 exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        return (uint256(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint256) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint256) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the estimated per-block borrow interest rate for this cToken after some change\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function estimateBorrowRatePerBlockAfterChange(uint256 change, bool repay) external view returns (uint256) {\\n        uint256 cashPriorNew;\\n        uint256 totalBorrowsNew;\\n\\n        if (repay) {\\n            cashPriorNew = add_(getCashPrior(), change);\\n            totalBorrowsNew = sub_(totalBorrows, change);\\n        } else {\\n            cashPriorNew = sub_(getCashPrior(), change);\\n            totalBorrowsNew = add_(totalBorrows, change);\\n        }\\n        return interestRateModel.getBorrowRate(cashPriorNew, totalBorrowsNew, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the estimated per-block supply interest rate for this cToken after some change\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function estimateSupplyRatePerBlockAfterChange(uint256 change, bool repay) external view returns (uint256) {\\n        uint256 cashPriorNew;\\n        uint256 totalBorrowsNew;\\n\\n        if (repay) {\\n            cashPriorNew = add_(getCashPrior(), change);\\n            totalBorrowsNew = sub_(totalBorrows, change);\\n        } else {\\n            cashPriorNew = sub_(getCashPrior(), change);\\n            totalBorrowsNew = add_(totalBorrows, change);\\n        }\\n\\n        return interestRateModel.getSupplyRate(cashPriorNew, totalBorrowsNew, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint256) {\\n        accrueInterest();\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint256) {\\n        accrueInterest();\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint256) {\\n        return borrowBalanceStoredInternal(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return the calculated balance or 0 if error code is non-zero\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (uint256) {\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return 0;\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        uint256 principalTimesIndex = mul_(borrowSnapshot.principal, borrowIndex);\\n        uint256 result = div_(principalTimesIndex, borrowSnapshot.interestIndex);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint256) {\\n        accrueInterest();\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint256) {\\n        return exchangeRateStoredInternal();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() internal view returns (uint256) {\\n        uint256 _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return initialExchangeRateMantissa;\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint256 totalCash = getCashPrior();\\n            uint256 cashPlusBorrowsMinusReserves = sub_(add_(totalCash, totalBorrows), totalReserves);\\n            uint256 exchangeRate = div_(cashPlusBorrowsMinusReserves, Exp({mantissa: _totalSupply}));\\n            return exchangeRate;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint256) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint256) {\\n        /* Remember the initial block number */\\n        uint256 currentBlockNumber = getBlockNumber();\\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint256 cashPrior = getCashPrior();\\n        uint256 borrowsPrior = totalBorrows;\\n        uint256 reservesPrior = totalReserves;\\n        uint256 borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate too high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        uint256 blockDelta = sub_(currentBlockNumber, accrualBlockNumberPrior);\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor = mul_(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        uint256 interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        uint256 totalBorrowsNew = add_(interestAccumulated, borrowsPrior);\\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\n            Exp({mantissa: reserveFactorMantissa}),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint256 mintAmount, bool isNative) internal nonReentrant returns (uint256, uint256) {\\n        accrueInterest();\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount, isNative);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint256 redeemTokens, bool isNative) internal nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0, isNative);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint256 redeemAmount, bool isNative) internal nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount, isNative);\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrowInternal(uint256 borrowAmount, bool isNative) internal nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount, isNative);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint256 accountBorrows;\\n        uint256 accountBorrowsNew;\\n        uint256 totalBorrowsNew;\\n    }\\n\\n    /**\\n     * @notice Users borrow assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrowFresh(\\n        address payable borrower,\\n        uint256 borrowAmount,\\n        bool isNative\\n    ) internal returns (uint256) {\\n        /* Fail if borrow not allowed */\\n        require(comptroller.borrowAllowed(address(this), borrower, borrowAmount) == 0, \\\"rejected\\\");\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), \\\"market is stale\\\");\\n\\n        /* Reverts if protocol has insufficient cash */\\n        require(getCashPrior() >= borrowAmount, \\\"insufficient cash\\\");\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        vars.accountBorrows = borrowBalanceStoredInternal(borrower);\\n        vars.accountBorrowsNew = add_(vars.accountBorrows, borrowAmount);\\n        vars.totalBorrowsNew = add_(totalBorrows, borrowAmount);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount, isNative);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint256 repayAmount, bool isNative) internal nonReentrant returns (uint256, uint256) {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount, isNative);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(\\n        address borrower,\\n        uint256 repayAmount,\\n        bool isNative\\n    ) internal nonReentrant returns (uint256, uint256) {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount, isNative);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint256 repayAmount;\\n        uint256 borrowerIndex;\\n        uint256 accountBorrows;\\n        uint256 accountBorrowsNew;\\n        uint256 totalBorrowsNew;\\n        uint256 actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of underlying tokens being returned\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        bool isNative\\n    ) internal returns (uint256, uint256) {\\n        /* Fail if repayBorrow not allowed */\\n        require(comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount) == 0, \\\"rejected\\\");\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), \\\"market is stale\\\");\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        vars.accountBorrows = borrowBalanceStoredInternal(borrower);\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint256(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount, isNative);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        vars.accountBorrowsNew = sub_(vars.accountBorrows, vars.actualRepayAmount);\\n        vars.totalBorrowsNew = sub_(totalBorrows, vars.actualRepayAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral,\\n        bool isNative\\n    ) internal nonReentrant returns (uint256, uint256) {\\n        accrueInterest();\\n        require(cTokenCollateral.accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral, isNative);\\n    }\\n\\n    struct LiquidateBorrowLocalVars {\\n        uint256 repayBorrowError;\\n        uint256 actualRepayAmount;\\n        uint256 amountSeizeError;\\n        uint256 seizeTokens;\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral,\\n        bool isNative\\n    ) internal returns (uint256, uint256) {\\n        /* Fail if liquidate not allowed */\\n        require(\\n            comptroller.liquidateBorrowAllowed(\\n                address(this),\\n                address(cTokenCollateral),\\n                liquidator,\\n                borrower,\\n                repayAmount\\n            ) == 0,\\n            \\\"rejected\\\"\\n        );\\n\\n        /* Verify market's block number equals current block number */\\n        require(accrualBlockNumber == getBlockNumber(), \\\"market is stale\\\");\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        require(cTokenCollateral.accrualBlockNumber() == getBlockNumber(), \\\"market is stale\\\");\\n\\n        /* Fail if borrower = liquidator */\\n        require(borrower != liquidator, \\\"invalid account pair\\\");\\n\\n        /* Fail if repayAmount = 0 or repayAmount = -1 */\\n        require(repayAmount > 0 && repayAmount != uint256(-1), \\\"invalid amount\\\");\\n\\n        LiquidateBorrowLocalVars memory vars;\\n\\n        /* Fail if repayBorrow fails */\\n        (vars.repayBorrowError, vars.actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount, isNative);\\n        require(vars.repayBorrowError == uint256(Error.NO_ERROR), \\\"repay borrow failed\\\");\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (vars.amountSeizeError, vars.seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n            address(this),\\n            address(cTokenCollateral),\\n            vars.actualRepayAmount\\n        );\\n        require(vars.amountSeizeError == uint256(Error.NO_ERROR), \\\"calculate seize amount failed\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= vars.seizeTokens, \\\"seize too much\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint256 seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, vars.seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, vars.seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint256(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, vars.actualRepayAmount, address(cTokenCollateral), vars.seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.liquidateBorrowVerify(\\n            address(this),\\n            address(cTokenCollateral),\\n            liquidator,\\n            borrower,\\n            vars.actualRepayAmount,\\n            vars.seizeTokens\\n        );\\n\\n        return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external nonReentrant returns (uint256) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptAdmin() external returns (uint256) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"not comptroller\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n     * @dev Admin function to accrue interest and set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n     * @dev Admin function to set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactorFresh(uint256 newReserveFactorMantissa) internal returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint256 addAmount, bool isNative) internal nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (uint256 error, ) = _addReservesFresh(addAmount, isNative);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint256 addAmount, bool isNative) internal returns (uint256, uint256) {\\n        // totalReserves + actualAddAmount\\n        uint256 totalReservesNew;\\n        uint256 actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount, isNative);\\n\\n        totalReservesNew = add_(totalReserves, actualAddAmount);\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint256(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint256 reduceAmount) external nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint256 reduceAmount) internal returns (uint256) {\\n        // totalReserves - reduceAmount\\n        uint256 totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = sub_(totalReserves, reduceAmount);\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        // Restrict reducing reserves in wrapped token. Implementations except `CWrappedNative` won't use parameter `isNative`.\\n        doTransferOut(admin, reduceAmount, false);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint256) {\\n        accrueInterest();\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint256) {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"invalid IRM\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(\\n        address from,\\n        uint256 amount,\\n        bool isNative\\n    ) internal returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(\\n        address payable to,\\n        uint256 amount,\\n        bool isNative\\n    ) internal;\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     */\\n    function transferTokens(\\n        address spender,\\n        address src,\\n        address dst,\\n        uint256 tokens\\n    ) internal returns (uint256);\\n\\n    /**\\n     * @notice Get the account's cToken balances\\n     */\\n    function getCTokenBalanceInternal(address account) internal view returns (uint256);\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     */\\n    function mintFresh(\\n        address minter,\\n        uint256 mintAmount,\\n        bool isNative\\n    ) internal returns (uint256, uint256);\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     */\\n    function redeemFresh(\\n        address payable redeemer,\\n        uint256 redeemTokensIn,\\n        uint256 redeemAmountIn,\\n        bool isNative\\n    ) internal returns (uint256);\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) internal returns (uint256);\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x967c58f65b46993cd2fc886ff40cf301f8952c1cde34f218028f153924e1949e\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./ERC3156FlashBorrowerInterface.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint256 internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint256 internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint256 public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint256 public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint256 public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint256 public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint256 public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint256 public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping(address => uint256) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint256 principal;\\n        uint256 interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CSupplyCapStorage {\\n    /**\\n     * @notice Internal cash counter for this CToken. Should equal underlying.balanceOf(address(this)) for CERC20.\\n     */\\n    uint256 public internalCash;\\n}\\n\\ncontract CCollateralCapStorage {\\n    /**\\n     * @notice Total number of tokens used as collateral in circulation.\\n     */\\n    uint256 public totalCollateralTokens;\\n\\n    /**\\n     * @notice Record of token balances which could be treated as collateral for each account.\\n     *         If collateral cap is not set, the value should be equal to accountTokens.\\n     */\\n    mapping(address => uint256) public accountCollateralTokens;\\n\\n    /**\\n     * @notice Check if accountCollateralTokens have been initialized.\\n     */\\n    mapping(address => bool) public isCollateralTokenInit;\\n\\n    /**\\n     * @notice Collateral cap for this CToken, zero for no cap.\\n     */\\n    uint256 public collateralCap;\\n}\\n\\n/*** Interface ***/\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 accountBorrows,\\n        uint256 totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        address cTokenCollateral,\\n        uint256 seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) public view returns (uint256);\\n\\n    function exchangeRateCurrent() public returns (uint256);\\n\\n    function exchangeRateStored() public view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function accrueInterest() public returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n    function _acceptAdmin() external returns (uint256);\\n\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint256);\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint256);\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n    /*** User Interface ***/\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) external returns (uint256);\\n\\n    function _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\\ncontract CWrappedNativeInterface is CErc20Interface {\\n    /**\\n     * @notice Flash loan fee ratio\\n     */\\n    uint256 public constant flashFeeBips = 3;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when a flashloan occurred\\n     */\\n    event Flashloan(address indexed receiver, uint256 amount, uint256 totalFee, uint256 reservesFee);\\n\\n    /*** User Interface ***/\\n\\n    function mintNative() external payable returns (uint256);\\n\\n    function redeemNative(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlyingNative(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrowNative(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrowNative() external payable returns (uint256);\\n\\n    function repayBorrowBehalfNative(address borrower) external payable returns (uint256);\\n\\n    function liquidateBorrowNative(address borrower, CTokenInterface cTokenCollateral)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function flashLoan(\\n        ERC3156FlashBorrowerInterface receiver,\\n        address initiator,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function _addReservesNative() external payable returns (uint256);\\n\\n    function collateralCap() external view returns (uint256);\\n\\n    function totalCollateralTokens() external view returns (uint256);\\n}\\n\\ncontract CCapableErc20Interface is CErc20Interface, CSupplyCapStorage {\\n    /**\\n     * @notice Flash loan fee ratio\\n     */\\n    uint256 public constant flashFeeBips = 3;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when a flashloan occurred\\n     */\\n    event Flashloan(address indexed receiver, uint256 amount, uint256 totalFee, uint256 reservesFee);\\n\\n    /*** User Interface ***/\\n\\n    function gulp() external;\\n}\\n\\ncontract CCollateralCapErc20Interface is CCapableErc20Interface, CCollateralCapStorage {\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when collateral cap is set\\n     */\\n    event NewCollateralCap(address token, uint256 newCap);\\n\\n    /**\\n     * @notice Event emitted when user collateral is changed\\n     */\\n    event UserCollateralChanged(address account, uint256 newCollateralTokens);\\n\\n    /*** User Interface ***/\\n\\n    function registerCollateral(address account) external returns (uint256);\\n\\n    function unregisterCollateral(address account) external;\\n\\n    function flashLoan(\\n        ERC3156FlashBorrowerInterface receiver,\\n        address initiator,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setCollateralCap(uint256 newCollateralCap) external;\\n}\\n\\ncontract CDelegatorInterface {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) public;\\n}\\n\\ncontract CDelegateInterface {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\\n/*** External interface ***/\\n\\n/**\\n * @title Flash loan receiver interface\\n */\\ninterface IFlashloanReceiver {\\n    function executeOperation(\\n        address sender,\\n        address underlying,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata params\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1f4b803c513a57c6d250c81af625f0f852832884db31d6245f94a0bc7f64f6cc\"},\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Careful Math\\n * @author Compound\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n     * @dev Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint256 c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        uint256 c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev add a and b and then subtract c\\n     */\\n    function addThenSubUInt(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (MathError, uint256) {\\n        (MathError err0, uint256 sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0x90cf991038eedf4bf014644819af5b2e8bbda13393ddb39153116f9b0de2a94c\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n}\\n\\ninterface ComptrollerInterfaceExtension {\\n    function checkMembership(address account, CToken cToken) external view returns (bool);\\n\\n    function updateCTokenVersion(address cToken, ComptrollerV1Storage.Version version) external;\\n\\n    function flashloanAllowed(\\n        address cToken,\\n        address receiver,\\n        uint256 amount,\\n        bytes calldata params\\n    ) external view returns (bool);\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function supplyCaps(address market) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x548fe8a7aa9ff0a9b70be3ecbb132acc7938fe9d5a59f9bbbf93e3caef5cb5d4\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle/PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Active brains of Unitroller\\n     */\\n    address public comptrollerImplementation;\\n\\n    /**\\n     * @notice Pending brains of Unitroller\\n     */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint256 public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint256 public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\"\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n\\n    enum Version {\\n        VANILLA,\\n        COLLATERALCAP,\\n        WRAPPEDNATIVE\\n    }\\n\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint256 collateralFactorMantissa;\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n        /// @notice CToken version\\n        Version version;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n    /**\\n     * @notice The Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public guardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    /// @dev This storage is deprecated.\\n    mapping(address => uint256) public compSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    /// @dev This storage is deprecated.\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    /// @dev This storage is deprecated.\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    /// @dev This storage is deprecated.\\n    mapping(address => mapping(address => uint256)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    /// @dev This storage is deprecated.\\n    mapping(address => mapping(address => uint256)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    /// @dev This storage is deprecated.\\n    mapping(address => uint256) public compAccrued;\\n\\n    /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address => uint256) public borrowCaps;\\n\\n    /// @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\\n    address public supplyCapGuardian;\\n\\n    /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n    mapping(address => uint256) public supplyCaps;\\n\\n    /// @notice creditLimits allowed specific protocols to borrow and repay without collateral.\\n    /// @dev This storage is deprecated.\\n    mapping(address => uint256) internal _oldCreditLimits;\\n\\n    /// @notice flashloanGuardianPaused can pause flash loan as a safety mechanism.\\n    mapping(address => bool) public flashloanGuardianPaused;\\n\\n    /// @notice liquidityMining the liquidity mining module that handles the LM rewards distribution.\\n    address public liquidityMining;\\n\\n    /// @notice creditLimits allowed specific protocols to borrow and repay specific markets without collateral.\\n    mapping(address => mapping(address => uint256)) internal _creditLimits;\\n\\n    /// @notice isMarketSoftDelisted records the market which has been soft delisted by us.\\n    mapping(address => bool) public isMarketSoftDelisted;\\n\\n    /// @notice creditLimitManager is the role who is in charge of increasing the credit limit.\\n    address public creditLimitManager;\\n\\n    /// @notice A list of all soft delisted markets\\n    address[] public softDelistedMarkets;\\n}\\n\",\"keccak256\":\"0x5c0f43eda4200299cdb5dca9a5c6b323aed1fb7210a267ad3cffe6ec2ab83277\"},\"contracts/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x468a9f4f1d1cdc9ab69c65f71f4a5e441766a5f648d5f5c53e86d8b44385ee3f\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x38cbb1a6f7e81083c61b859cbdb4a015c6fea54988865f303495ad047d90cb76\"},\"contracts/ERC3156FlashBorrowerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ninterface ERC3156FlashBorrowerInterface {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x18b8731a7f3303bfdb5dad4f76d30dfb2be70bca05a31cef5762dabd8e5fba76\"},\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), 0);\\n\\n        return uint256(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint256 opaqueError\\n    ) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n        return uint256(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), 0);\\n\\n        return uint256(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint256 opaqueError\\n    ) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n        return uint256(err);\\n    }\\n}\\n\",\"keccak256\":\"0xf8624446572a3999d9b4cc7b9f7e68b462c1e307247fe572ebe24035192103f7\"},\"contracts/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint256 constant expScale = 1e18;\\n    uint256 constant doubleScale = 1e36;\\n    uint256 constant halfExpScale = expScale / 2;\\n    uint256 constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint256 mantissa;\\n    }\\n\\n    struct Double {\\n        uint256 mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint256 num, uint256 denom) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (MathError, uint256) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (MathError, uint256) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (MathError, uint256) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function div_ScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        uint256 numerator = mul_(expScale, scalar);\\n        return Exp({mantissa: div_(numerator, divisor)});\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function div_ScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (uint256) {\\n        Exp memory fraction = div_ScalarByExp(scalar, divisor);\\n        return truncate(fraction);\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint256 a, uint256 b) internal pure returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(\\n        Exp memory a,\\n        Exp memory b,\\n        Exp memory c\\n    ) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint256) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n\\n    // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\\n    // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 xx = x;\\n        uint256 r = 1;\\n\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xba4952ec54a04bb19f130061e4c5c8de0634a239074be3d654263b214fb37317\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x56a8020bb8a9545006984eb08257e577b18612b3f4f533dfb6859ae369ba6544\"},\"contracts/PriceOracle/Denominations.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract Denominations {\\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n    // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n    address public constant USD = address(840);\\n    address public constant GBP = address(826);\\n    address public constant EUR = address(978);\\n    address public constant JPY = address(392);\\n    address public constant KRW = address(410);\\n    address public constant CNY = address(156);\\n    address public constant AUD = address(36);\\n    address public constant CAD = address(124);\\n    address public constant CHF = address(756);\\n    address public constant ARS = address(32);\\n    address public constant PHP = address(608);\\n    address public constant NZD = address(554);\\n    address public constant SGD = address(702);\\n    address public constant NGN = address(566);\\n    address public constant ZAR = address(710);\\n    address public constant RUB = address(643);\\n    address public constant INR = address(356);\\n    address public constant BRL = address(986);\\n}\\n\",\"keccak256\":\"0x22165a7413b53e6aae31b68492523f8a1591ac4c13ea9a79c8a079e94526d5be\"},\"contracts/PriceOracle/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../CToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /**\\n     * @notice Get the underlying price of a cToken asset\\n     * @param cToken The cToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8184c962f9c4243feed1bcfa3fb225da145db3661d2c7c9decc256f851128acf\"},\"contracts/PriceOracle/PriceOracleProxyIB.sol\":{\"content\":\"pragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Denominations.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./interfaces/BandReference.sol\\\";\\nimport \\\"./interfaces/FeedRegistryInterface.sol\\\";\\nimport \\\"./interfaces/V1PriceOracleInterface.sol\\\";\\nimport \\\"../CErc20.sol\\\";\\nimport \\\"../CToken.sol\\\";\\nimport \\\"../Exponential.sol\\\";\\nimport \\\"../EIP20Interface.sol\\\";\\n\\ncontract PriceOracleProxyIB is PriceOracle, Exponential, Denominations {\\n    /// @notice Admin address\\n    address public admin;\\n\\n    /// @notice Guardian address\\n    address public guardian;\\n\\n    struct AggregatorInfo {\\n        /// @notice The base\\n        address base;\\n        /// @notice The quote denomination\\n        address quote;\\n        /// @notice It's being used or not.\\n        bool isUsed;\\n    }\\n\\n    struct ReferenceInfo {\\n        /// @notice The symbol used in reference\\n        string symbol;\\n        /// @notice It's being used or not.\\n        bool isUsed;\\n    }\\n\\n    /// @notice Chainlink Aggregators\\n    mapping(address => AggregatorInfo) public aggregators;\\n\\n    /// @notice Band Reference\\n    mapping(address => ReferenceInfo) public references;\\n\\n    /// @notice The ChainLink registry address\\n    FeedRegistryInterface public reg;\\n\\n    /// @notice The BAND reference address\\n    StdReferenceInterface public ref;\\n\\n    /// @notice The v1 price oracle, maintained by Iron Bank\\n    /// @dev v1PriceOracle only provides price for deprecated markets (not supported by ChainLink and Band)\\n    V1PriceOracleInterface public v1PriceOracle;\\n\\n    /// @notice Deprecated markets that use v1 oracle\\n    mapping(address => bool) public deprecatedMarkets;\\n\\n    /// @notice Quote symbol we used for BAND reference contract\\n    string public constant QUOTE_SYMBOL = \\\"USD\\\";\\n\\n    /**\\n     * @param admin_ The address of admin to set aggregators\\n     * @param v1PriceOracle_ The v1 price oracle\\n     * @param registry_ The address of ChainLink registry\\n     * @param reference_ The address of Band reference\\n     */\\n    constructor(\\n        address admin_,\\n        address v1PriceOracle_,\\n        address registry_,\\n        address reference_\\n    ) public {\\n        admin = admin_;\\n        v1PriceOracle = V1PriceOracleInterface(v1PriceOracle_);\\n        reg = FeedRegistryInterface(registry_);\\n        ref = StdReferenceInterface(reference_);\\n    }\\n\\n    /**\\n     * @notice Get the underlying price of a listed cToken asset\\n     * @param cToken The cToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18)\\n     */\\n    function getUnderlyingPrice(CToken cToken) public view returns (uint256) {\\n        address underlying = CErc20(address(cToken)).underlying();\\n\\n        // Get price from ChainLink.\\n        AggregatorInfo storage aggregatorInfo = aggregators[underlying];\\n        if (aggregatorInfo.isUsed) {\\n            uint256 price = getPriceFromChainlink(aggregatorInfo.base, aggregatorInfo.quote);\\n            if (aggregatorInfo.quote == Denominations.ETH) {\\n                // Convert the price to USD based if it's ETH based.\\n                uint256 ethUsdPrice = getPriceFromChainlink(Denominations.ETH, Denominations.USD);\\n                price = mul_(price, Exp({mantissa: ethUsdPrice}));\\n            }\\n            return getNormalizedPrice(price, underlying);\\n        }\\n\\n        // Get price from Band.\\n        ReferenceInfo storage referenceInfo = references[underlying];\\n        if (referenceInfo.isUsed) {\\n            uint256 price = getPriceFromBAND(referenceInfo.symbol);\\n            return getNormalizedPrice(price, underlying);\\n        }\\n\\n        // Get price from v1.\\n        if (deprecatedMarkets[underlying]) {\\n            return getPriceFromV1(underlying);\\n        }\\n\\n        revert(\\\"no price\\\");\\n    }\\n\\n    /*** Internal functions ***/\\n\\n    /**\\n     * @notice Get price from ChainLink\\n     * @param base The base token that ChainLink aggregator gets the price of\\n     * @param quote The quote token, currently support ETH and USD\\n     * @return The price, scaled by 1e18\\n     */\\n    function getPriceFromChainlink(address base, address quote) internal view returns (uint256) {\\n        (, int256 price, , , ) = reg.latestRoundData(base, quote);\\n        require(price > 0, \\\"invalid price\\\");\\n\\n        // Extend the decimals to 1e18.\\n        return mul_(uint256(price), 10**(18 - uint256(reg.decimals(base, quote))));\\n    }\\n\\n    /**\\n     * @notice Get price from BAND protocol.\\n     * @param symbol The symbol that used to get price of\\n     * @return The price, scaled by 1e18\\n     */\\n    function getPriceFromBAND(string memory symbol) internal view returns (uint256) {\\n        StdReferenceInterface.ReferenceData memory data = ref.getReferenceData(symbol, QUOTE_SYMBOL);\\n        require(data.rate > 0, \\\"invalid price\\\");\\n\\n        // Price from BAND is always 1e18 base.\\n        return data.rate;\\n    }\\n\\n    /**\\n     * @notice Normalize the price according to the token decimals.\\n     * @param price The original price\\n     * @param tokenAddress The token address\\n     * @return The normalized price.\\n     */\\n    function getNormalizedPrice(uint256 price, address tokenAddress) internal view returns (uint256) {\\n        uint256 underlyingDecimals = EIP20Interface(tokenAddress).decimals();\\n        return mul_(price, 10**(18 - underlyingDecimals));\\n    }\\n\\n    /**\\n     * @notice Get price from v1 price oracle\\n     * @param token The token to get the price of\\n     * @return The price\\n     */\\n    function getPriceFromV1(address token) internal view returns (uint256) {\\n        return v1PriceOracle.assetPrices(token);\\n    }\\n\\n    /*** Admin or guardian functions ***/\\n\\n    event AggregatorUpdated(address tokenAddress, address base, address quote, bool isUsed);\\n    event ReferenceUpdated(address tokenAddress, string symbol, bool isUsed);\\n    event SetGuardian(address guardian);\\n    event SetAdmin(address admin);\\n    event DeprecatedMarketUpdated(address tokenAddress, bool isDeprecated);\\n\\n    /**\\n     * @notice Set guardian for price oracle proxy\\n     * @param _guardian The new guardian\\n     */\\n    function _setGuardian(address _guardian) external {\\n        require(msg.sender == admin, \\\"only the admin may set new guardian\\\");\\n        guardian = _guardian;\\n        emit SetGuardian(guardian);\\n    }\\n\\n    /**\\n     * @notice Set admin for price oracle proxy\\n     * @param _admin The new admin\\n     */\\n    function _setAdmin(address _admin) external {\\n        require(msg.sender == admin, \\\"only the admin may set new admin\\\");\\n        require(_admin != address(0), \\\"invalid admin\\\");\\n        admin = _admin;\\n        emit SetAdmin(admin);\\n    }\\n\\n    /**\\n     * @notice Set ChainLink aggregators for multiple tokens\\n     * @param tokenAddresses The list of underlying tokens\\n     * @param bases The list of ChainLink aggregator bases\\n     * @param quotes The list of ChainLink aggregator quotes, currently support 'ETH' and 'USD'\\n     */\\n    function _setAggregators(\\n        address[] calldata tokenAddresses,\\n        address[] calldata bases,\\n        address[] calldata quotes\\n    ) external {\\n        require(msg.sender == admin, \\\"only the admin may set the aggregators\\\");\\n        require(tokenAddresses.length == bases.length && tokenAddresses.length == quotes.length, \\\"mismatched data\\\");\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            bool isUsed;\\n            if (bases[i] != address(0)) {\\n                require(quotes[i] == Denominations.ETH || quotes[i] == Denominations.USD, \\\"unsupported denomination\\\");\\n                isUsed = true;\\n\\n                // Make sure the aggregator works.\\n                address aggregator = reg.getFeed(bases[i], quotes[i]);\\n                require(reg.isFeedEnabled(aggregator), \\\"aggregator not enabled\\\");\\n\\n                (, int256 price, , , ) = reg.latestRoundData(bases[i], quotes[i]);\\n                require(price > 0, \\\"invalid price\\\");\\n            }\\n            aggregators[tokenAddresses[i]] = AggregatorInfo({base: bases[i], quote: quotes[i], isUsed: isUsed});\\n            emit AggregatorUpdated(tokenAddresses[i], bases[i], quotes[i], isUsed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Disable ChainLink aggregator\\n     * @param tokenAddress The underlying token\\n     */\\n    function _disableAggregator(address tokenAddress) external {\\n        require(msg.sender == admin || msg.sender == guardian, \\\"only the admin or guardian may disable the aggregator\\\");\\n\\n        AggregatorInfo storage aggregatorInfo = aggregators[tokenAddress];\\n        require(aggregatorInfo.isUsed, \\\"aggregator not used\\\");\\n\\n        aggregatorInfo.isUsed = false;\\n        emit AggregatorUpdated(tokenAddress, aggregatorInfo.base, aggregatorInfo.quote, aggregatorInfo.isUsed);\\n    }\\n\\n    /**\\n     * @notice Enable ChainLink aggregator\\n     * @param tokenAddress The underlying token\\n     */\\n    function _enableAggregator(address tokenAddress) external {\\n        require(msg.sender == admin || msg.sender == guardian, \\\"only the admin or guardian may enable the aggregator\\\");\\n\\n        AggregatorInfo storage aggregatorInfo = aggregators[tokenAddress];\\n        require(!aggregatorInfo.isUsed, \\\"aggregator is already used\\\");\\n\\n        // Make sure the aggregator works.\\n        address aggregator = reg.getFeed(aggregatorInfo.base, aggregatorInfo.quote);\\n        require(reg.isFeedEnabled(aggregator), \\\"aggregator not enabled\\\");\\n\\n        (, int256 price, , , ) = reg.latestRoundData(aggregatorInfo.base, aggregatorInfo.quote);\\n        require(price > 0, \\\"invalid price\\\");\\n\\n        aggregatorInfo.isUsed = true;\\n        emit AggregatorUpdated(tokenAddress, aggregatorInfo.base, aggregatorInfo.quote, aggregatorInfo.isUsed);\\n    }\\n\\n    /**\\n     * @notice Set Band references for multiple tokens\\n     * @param tokenAddresses The list of underlying tokens\\n     * @param symbols The list of symbols used by Band reference\\n     */\\n    function _setReferences(address[] calldata tokenAddresses, string[] calldata symbols) external {\\n        require(msg.sender == admin, \\\"only the admin may set the references\\\");\\n        require(tokenAddresses.length == symbols.length, \\\"mismatched data\\\");\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            bool isUsed;\\n            if (bytes(symbols[i]).length != 0) {\\n                isUsed = true;\\n\\n                // Make sure we could get the price.\\n                StdReferenceInterface.ReferenceData memory data = ref.getReferenceData(symbols[i], QUOTE_SYMBOL);\\n                require(data.rate > 0, \\\"invalid price\\\");\\n            }\\n\\n            references[tokenAddresses[i]] = ReferenceInfo({symbol: symbols[i], isUsed: isUsed});\\n            emit ReferenceUpdated(tokenAddresses[i], symbols[i], isUsed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Disable Band reference\\n     * @param tokenAddress The underlying token\\n     */\\n    function _disableReference(address tokenAddress) external {\\n        require(msg.sender == admin || msg.sender == guardian, \\\"only the admin or guardian may disable the reference\\\");\\n\\n        ReferenceInfo storage referenceInfo = references[tokenAddress];\\n        require(referenceInfo.isUsed, \\\"reference not used\\\");\\n\\n        referenceInfo.isUsed = false;\\n        emit ReferenceUpdated(tokenAddress, referenceInfo.symbol, referenceInfo.isUsed);\\n    }\\n\\n    /**\\n     * @notice Enable Band reference\\n     * @param tokenAddress The underlying token\\n     */\\n    function _enableReference(address tokenAddress) external {\\n        require(msg.sender == admin || msg.sender == guardian, \\\"only the admin or guardian may enable the reference\\\");\\n\\n        ReferenceInfo storage referenceInfo = references[tokenAddress];\\n        require(!referenceInfo.isUsed, \\\"reference is already used\\\");\\n\\n        // Make sure we could get the price.\\n        StdReferenceInterface.ReferenceData memory data = ref.getReferenceData(referenceInfo.symbol, QUOTE_SYMBOL);\\n        require(data.rate > 0, \\\"invalid price\\\");\\n\\n        referenceInfo.isUsed = true;\\n        emit ReferenceUpdated(tokenAddress, referenceInfo.symbol, referenceInfo.isUsed);\\n    }\\n\\n    /**\\n     * @notice Update deprecated markets for multiple tokens\\n     * @param tokenAddresses The list of underlying tokens\\n     * @param deprecated The list of tokens are deprecated or not\\n     */\\n    function _updateDeprecatedMarkets(address[] calldata tokenAddresses, bool[] calldata deprecated) external {\\n        require(msg.sender == admin, \\\"only the admin may update the deprecated markets\\\");\\n        require(tokenAddresses.length == deprecated.length, \\\"mismatched data\\\");\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            if (deprecatedMarkets[tokenAddresses[i]] != deprecated[i]) {\\n                deprecatedMarkets[tokenAddresses[i]] = deprecated[i];\\n\\n                emit DeprecatedMarketUpdated(tokenAddresses[i], deprecated[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa3cdc80dc5288285279d2f045a80687a025d734bbf5fef916d3244eb3109071\"},\"contracts/PriceOracle/interfaces/BandReference.sol\":{\"content\":\"pragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\ninterface StdReferenceInterface {\\n    /// A structure returned whenever someone requests for standard reference data.\\n    struct ReferenceData {\\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\\n    }\\n\\n    /// Returns the price data for the given base/quote pair. Revert if not available.\\n    function getReferenceData(string calldata _base, string calldata _quote)\\n        external\\n        view\\n        returns (ReferenceData memory);\\n\\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\\n    function getRefenceDataBulk(string[] calldata _bases, string[] calldata _quotes)\\n        external\\n        view\\n        returns (ReferenceData[] memory);\\n}\\n\",\"keccak256\":\"0xf8ca3bcb02a4841fc4fde5cb280e946201d8f90a0e97a9f2c57a953b1177d8cc\"},\"contracts/PriceOracle/interfaces/FeedRegistryInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ninterface FeedRegistryInterface {\\n    function decimals(address base, address quote) external view returns (uint8);\\n\\n    function description(address base, address quote) external view returns (string memory);\\n\\n    function version(address base, address quote) external view returns (uint256);\\n\\n    function getRoundData(\\n        address base,\\n        address quote,\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData(address base, address quote)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function getFeed(address base, address quote) external view returns (address aggregator);\\n\\n    function isFeedEnabled(address aggregator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x465679cfdb6df8506f1ddc2be1c3a0844a9ebae570b19b247db41ab38fca798f\"},\"contracts/PriceOracle/interfaces/V1PriceOracleInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ninterface V1PriceOracleInterface {\\n    function assetPrices(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd95be4901a987cc0f4e63e11e767f0f49d2ec39dcf12be1270db75e6ec34aef5\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002da338038062002da383398101604081905262000034916200009b565b600080546001600160a01b039586166001600160a01b031991821617909155600680549486169482169490941790935560048054928516928416929092179091556005805491909316911617905562000131565b8051620000958162000117565b92915050565b60008060008060808587031215620000b257600080fd5b6000620000c0878762000088565b9450506020620000d38782880162000088565b9350506040620000e68782880162000088565b9250506060620000f98782880162000088565b91505092959194509250565b60006001600160a01b03821662000095565b620001228162000105565b81146200012e57600080fd5b50565b612c6280620001416000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c8063598853761161013b578063ae6a04d4116100b8578063f851a4401161007c578063f851a4401461041a578063f9ff41db14610422578063fc57d4df14610442578063fd760c4914610462578063fe10c98d1461046a5761023d565b8063ae6a04d4146103dc578063ca9d1a72146103ef578063e38e8c0f146103f7578063e774928e1461040a578063f37fcc42146104125761023d565b8063738fdd1a116100ff578063738fdd1a146103b45780638322fff2146103bc578063976d5e77146103c45780639db2a472146103cc578063a4a23595146103d45761023d565b806359885376146103525780635c8ed2f3146103655780636a5dd409146103865780636b09583c146103995780636dc3bb13146103a15761023d565b80632792949d116101c9578063452a93201161018d578063452a93201461031d57806345a4117314610325578063465bd0a31461033a57806353f7c3671461034257806356ef45141461034a5761023d565b80632792949d146102df578063294a2bf2146102e75780632e79477f146102ef5780633a74a767146102f75780634079f35d1461030a5761023d565b8063112cdab911610210578063112cdab91461028557806311748f1c146102a757806319342a64146102ba5780631bf6c21b146102c257806321a78f68146102ca5761023d565b806301b8b3391461024257806303d698f21461026057806309c71f4c146102685780630c0128341461027d575b600080fd5b61024a610472565b6040516102579190612821565b60405180910390f35b61024a610478565b61027b6102763660046120e8565b61047e565b005b61024a61063e565b61029861029336600461200b565b610643565b60405161025793929190612888565b61027b6102b536600461200b565b610675565b61024a61080a565b61024a61080f565b6102d2610815565b6040516102579190612940565b61024a610824565b61024a61083c565b61024a610842565b61027b61030536600461200b565b610848565b61027b6103183660046120e8565b6108f4565b61024a610c96565b61032d610ca5565b6040516102579190612974565b61024a610cc4565b61024a610cca565b61024a610cd0565b61027b61036036600461200b565b610cd6565b61037861037336600461200b565b610fa8565b6040516102579291906129aa565b61027b61039436600461200b565b611052565b61024a61111a565b61027b6103af36600461200b565b611120565b6102d2611200565b61024a61120f565b61024a611227565b61024a61122d565b61024a611233565b61027b6103ea366004612047565b611238565b61024a611754565b61027b61040536600461200b565b61175a565b61024a6117d5565b61024a6117db565b61024a6117e1565b61043561043036600461200b565b6117f0565b6040516102579190612932565b610455610450366004612194565b611805565b6040516102579190612b0b565b61024a611a61565b6102d2611a66565b61033a81565b61023681565b6000546001600160a01b031633146104b15760405162461bcd60e51b81526004016104a890612aeb565b60405180910390fd5b8281146104d05760405162461bcd60e51b81526004016104a890612a3b565b60005b83811015610637578282828181106104e757fe5b90506020020160206104fc9190810190612158565b15156007600087878581811061050e57fe5b9050602002016020610523919081019061200b565b6001600160a01b0316815260208101919091526040016000205460ff1615151461062f5782828281811061055357fe5b90506020020160206105689190810190612158565b6007600087878581811061057857fe5b905060200201602061058d919081019061200b565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557f2cd78fe8c13555e7f6dadd7b513f7be9549dc68a6b1853e95e8ae312dfa902e98585838181106105e257fe5b90506020020160206105f7919081019061200b565b84848481811061060357fe5b90506020020160206106189190810190612158565b6040516106269291906128b8565b60405180910390a15b6001016104d3565b5050505050565b602081565b600260205260009081526040902080546001909101546001600160a01b0391821691811690600160a01b900460ff1683565b6000546001600160a01b031633148061069857506001546001600160a01b031633145b6106b45760405162461bcd60e51b81526004016104a890612adb565b6001600160a01b0381166000908152600360205260409020600181015460ff16156106f15760405162461bcd60e51b81526004016104a890612a1b565b6106f9611e53565b60055460408051808201825260038152621554d160ea1b6020820152905163195556f360e21b81526001600160a01b03909216916365555bcc91610742918691906004016129ca565b60606040518083038186803b15801561075a57600080fd5b505afa15801561076e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061079291908101906121b2565b80519091506107b35760405162461bcd60e51b81526004016104a890612a5b565b6001828101805460ff1916909117908190556040517f4184c679f002966cd74ef1d937e6c4f542ce507b2fd2e398a9923caf31f4cc1f916107fd918691869160ff90911690612903565b60405180910390a1505050565b607c81565b61034881565b6005546001600160a01b031681565b73bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb81565b6103d281565b6102be81565b6000546001600160a01b031633146108725760405162461bcd60e51b81526004016104a890612a0b565b6001600160a01b0381166108985760405162461bcd60e51b81526004016104a890612a8b565b600080546001600160a01b0319166001600160a01b0383811691909117918290556040517f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1926108e9921690612821565b60405180910390a150565b6000546001600160a01b0316331461091e5760405162461bcd60e51b81526004016104a890612aab565b82811461093d5760405162461bcd60e51b81526004016104a890612a3b565b60005b8381101561063757600083838381811061095657fe5b602002820190508035601e193684900301811261097257600080fd5b9091016020810191503567ffffffffffffffff81111561099157600080fd5b368190038213156109a157600080fd5b159050610ac8575060016109b3611e53565b6005546001600160a01b03166365555bcc8686868181106109d057fe5b602002820190508035601e19368490030181126109ec57600080fd5b9091016020810191503567ffffffffffffffff811115610a0b57600080fd5b36819003821315610a1b57600080fd5b604051806040016040528060038152602001621554d160ea1b8152506040518463ffffffff1660e01b8152600401610a559392919061294e565b60606040518083038186803b158015610a6d57600080fd5b505afa158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aa591908101906121b2565b8051909150610ac65760405162461bcd60e51b81526004016104a890612a5b565b505b6040518060400160405280858585818110610adf57fe5b602002820190508035601e1936849003018112610afb57600080fd5b9091016020810191503567ffffffffffffffff811115610b1a57600080fd5b36819003821315610b2a57600080fd5b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050831515602090920191909152600390888886818110610b7b57fe5b9050602002016020610b90919081019061200b565b6001600160a01b03168152602080820192909252604001600020825180519192610bbf92849290910190611e74565b50602091909101516001909101805460ff19169115159190911790557f4184c679f002966cd74ef1d937e6c4f542ce507b2fd2e398a9923caf31f4cc1f868684818110610c0857fe5b9050602002016020610c1d919081019061200b565b858585818110610c2957fe5b602002820190508035601e1936849003018112610c4557600080fd5b9091016020810191503567ffffffffffffffff811115610c6457600080fd5b36819003821315610c7457600080fd5b84604051610c8594939291906128d3565b60405180910390a150600101610940565b6001546001600160a01b031681565b604051806040016040528060038152602001621554d160ea1b81525081565b61018881565b61026081565b61019a81565b6000546001600160a01b0316331480610cf957506001546001600160a01b031633145b610d155760405162461bcd60e51b81526004016104a890612acb565b6001600160a01b03811660009081526002602052604090206001810154600160a01b900460ff1615610d595760405162461bcd60e51b81526004016104a890612a2b565b600480548254600184015460405163d2edb6dd60e01b81526000946001600160a01b039485169463d2edb6dd94610d9794908216939116910161282f565b60206040518083038186803b158015610daf57600080fd5b505afa158015610dc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610de79190810190612029565b6004805460405163b099d43b60e01b81529293506001600160a01b03169163b099d43b91610e1791859101612821565b60206040518083038186803b158015610e2f57600080fd5b505afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e679190810190612176565b610e835760405162461bcd60e51b81526004016104a8906129db565b600480548354600185015460405163bcfd032d60e01b81526000946001600160a01b039485169463bcfd032d94610ec194908216939116910161282f565b60a06040518083038186803b158015610ed957600080fd5b505afa158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f1191908101906121ee565b50505091505060008113610f375760405162461bcd60e51b81526004016104a890612a5b565b60018301805460ff60a01b1916600160a01b9081179182905584546040517f1ce411df4a158aa72e588cc62a13841fd7f7e644f81b10b60b90cb97b9017fa793610f9a9389936001600160a01b0390811693908316929190910460ff169061284a565b60405180910390a150505050565b60036020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290929183919083018282801561103f5780601f106110145761010080835404028352916020019161103f565b820191906000526020600020905b81548152906001019060200180831161102257829003601f168201915b5050506001909301549192505060ff1682565b6000546001600160a01b031633148061107557506001546001600160a01b031633145b6110915760405162461bcd60e51b81526004016104a8906129eb565b6001600160a01b0381166000908152600360205260409020600181015460ff166110cd5760405162461bcd60e51b81526004016104a8906129fb565b60018101805460ff191690556040517f4184c679f002966cd74ef1d937e6c4f542ce507b2fd2e398a9923caf31f4cc1f9061110e9084908490600090612903565b60405180910390a15050565b6103da81565b6000546001600160a01b031633148061114357506001546001600160a01b031633145b61115f5760405162461bcd60e51b81526004016104a890612afb565b6001600160a01b03811660009081526002602052604090206001810154600160a01b900460ff166111a25760405162461bcd60e51b81526004016104a890612a4b565b60018101805460ff60a01b1981169182905582546040517f1ce411df4a158aa72e588cc62a13841fd7f7e644f81b10b60b90cb97b9017fa79361110e9387936001600160a01b0390811693911691600160a01b900460ff169061284a565b6004546001600160a01b031681565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61028381565b6102c681565b609c81565b6000546001600160a01b031633146112625760405162461bcd60e51b81526004016104a890612a6b565b848314801561127057508481145b61128c5760405162461bcd60e51b81526004016104a890612a3b565b60005b8581101561174b576000808686848181106112a657fe5b90506020020160206112bb919081019061200b565b6001600160a01b0316146115a95773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8484848181106112ea57fe5b90506020020160206112ff919081019061200b565b6001600160a01b0316148061133e575061034884848481811061131e57fe5b9050602002016020611333919081019061200b565b6001600160a01b0316145b61135a5760405162461bcd60e51b81526004016104a890612a9b565b506004546001906000906001600160a01b031663d2edb6dd88888681811061137e57fe5b9050602002016020611393919081019061200b565b87878781811061139f57fe5b90506020020160206113b4919081019061200b565b6040518363ffffffff1660e01b81526004016113d192919061282f565b60206040518083038186803b1580156113e957600080fd5b505afa1580156113fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114219190810190612029565b6004805460405163b099d43b60e01b81529293506001600160a01b03169163b099d43b9161145191859101612821565b60206040518083038186803b15801561146957600080fd5b505afa15801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114a19190810190612176565b6114bd5760405162461bcd60e51b81526004016104a8906129db565b6004546000906001600160a01b031663bcfd032d8989878181106114dd57fe5b90506020020160206114f2919081019061200b565b8888888181106114fe57fe5b9050602002016020611513919081019061200b565b6040518363ffffffff1660e01b815260040161153092919061282f565b60a06040518083038186803b15801561154857600080fd5b505afa15801561155c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061158091908101906121ee565b505050915050600081136115a65760405162461bcd60e51b81526004016104a890612a5b565b50505b60405180606001604052808787858181106115c057fe5b90506020020160206115d5919081019061200b565b6001600160a01b031681526020018585858181106115ef57fe5b9050602002016020611604919081019061200b565b6001600160a01b03168152602001821515815250600260008a8a8681811061162857fe5b905060200201602061163d919081019061200b565b6001600160a01b0390811682526020808301939093526040918201600020845181549083166001600160a01b0319918216178255938501516001909101805495909301511515600160a01b0260ff60a01b19919092169490931693909317919091169190911790557f1ce411df4a158aa72e588cc62a13841fd7f7e644f81b10b60b90cb97b9017fa78888848181106116d257fe5b90506020020160206116e7919081019061200b565b8787858181106116f357fe5b9050602002016020611708919081019061200b565b86868681811061171457fe5b9050602002016020611729919081019061200b565b8460405161173a949392919061284a565b60405180910390a15060010161128f565b50505050505050565b61022a81565b6000546001600160a01b031633146117845760405162461bcd60e51b81526004016104a890612a7b565b600180546001600160a01b0319166001600160a01b0383811691909117918290556040517f31845eceb9cde510c7e8b37f76301c688feb70bc9653aa4c28a3734999840fd8926108e9921690612821565b61016481565b6102f481565b6000546001600160a01b031681565b60076020526000908152604090205460ff1681565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561184157600080fd5b505afa158015611855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118799190810190612029565b6001600160a01b0381166000908152600260205260409020600181015491925090600160a01b900460ff161561194957805460018201546000916118c9916001600160a01b039182169116611a75565b60018301549091506001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561193557600061191773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610348611a75565b905061193182604051806020016040528084815250611bbc565b9150505b61193f8184611be4565b9350505050611a5c565b6001600160a01b0382166000908152600360205260409020600181015460ff1615611a1a57805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152600092611a039285918301828280156119f95780601f106119ce576101008083540402835291602001916119f9565b820191906000526020600020905b8154815290600101906020018083116119dc57829003601f168201915b5050505050611c6d565b9050611a0f8185611be4565b945050505050611a5c565b6001600160a01b03831660009081526007602052604090205460ff1615611a445761193f83611d38565b60405162461bcd60e51b81526004016104a890612abb565b919050565b602481565b6006546001600160a01b031681565b6004805460405163bcfd032d60e01b815260009283926001600160a01b03169163bcfd032d91611aa991889188910161282f565b60a06040518083038186803b158015611ac157600080fd5b505afa158015611ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611af991908101906121ee565b50505091505060008113611b1f5760405162461bcd60e51b81526004016104a890612a5b565b60048054604051630b1c5a7560e31b8152611bb29284926001600160a01b0316916358e2d3a891611b54918a918a910161282f565b60206040518083038186803b158015611b6c57600080fd5b505afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ba49190810190612263565b60ff16601203600a0a611db9565b9150505b92915050565b6000670de0b6b3a7640000611bd5848460000151611db9565b81611bdc57fe5b049392505050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2057600080fd5b505afa158015611c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c589190810190612263565b60ff169050611bb28482601203600a0a611db9565b6000611c77611e53565b60055460408051808201825260038152621554d160ea1b6020820152905163195556f360e21b81526001600160a01b03909216916365555bcc91611cc091879190600401612985565b60606040518083038186803b158015611cd857600080fd5b505afa158015611cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d1091908101906121b2565b8051909150611d315760405162461bcd60e51b81526004016104a890612a5b565b5192915050565b6006546040516317a6948f60e21b81526000916001600160a01b031690635e9a523c90611d69908590600401612821565b60206040518083038186803b158015611d8157600080fd5b505afa158015611d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bb691908101906121d0565b6000611dfb83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250611e02565b9392505050565b6000831580611e0f575082155b15611e1c57506000611dfb565b83830283858281611e2957fe5b04148390611e4a5760405162461bcd60e51b81526004016104a89190612974565b50949350505050565b60405180606001604052806000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611eb557805160ff1916838001178555611ee2565b82800160010185558215611ee2579182015b82811115611ee2578251825591602001919060010190611ec7565b50611eee929150611ef2565b5090565b611f0c91905b80821115611eee5760008155600101611ef8565b90565b8035611bb681612bdb565b8051611bb681612bdb565b60008083601f840112611f3757600080fd5b50813567ffffffffffffffff811115611f4f57600080fd5b602083019150836020820283011115611f6757600080fd5b9250929050565b8035611bb681612bf2565b8051611bb681612bf2565b8035611bb681612bfb565b8051611bb681612c04565b600060608284031215611fac57600080fd5b611fb66060612b19565b90506000611fc48484611f8f565b8252506020611fd584848301611f8f565b6020830152506040611fe984828501611f8f565b60408301525092915050565b8051611bb681612c16565b8051611bb681612c0d565b60006020828403121561201d57600080fd5b6000611bb28484611f0f565b60006020828403121561203b57600080fd5b6000611bb28484611f1a565b6000806000806000806060878903121561206057600080fd5b863567ffffffffffffffff81111561207757600080fd5b61208389828a01611f25565b9650965050602087013567ffffffffffffffff8111156120a257600080fd5b6120ae89828a01611f25565b9450945050604087013567ffffffffffffffff8111156120cd57600080fd5b6120d989828a01611f25565b92509250509295509295509295565b600080600080604085870312156120fe57600080fd5b843567ffffffffffffffff81111561211557600080fd5b61212187828801611f25565b9450945050602085013567ffffffffffffffff81111561214057600080fd5b61214c87828801611f25565b95989497509550505050565b60006020828403121561216a57600080fd5b6000611bb28484611f6e565b60006020828403121561218857600080fd5b6000611bb28484611f79565b6000602082840312156121a657600080fd5b6000611bb28484611f84565b6000606082840312156121c457600080fd5b6000611bb28484611f9a565b6000602082840312156121e257600080fd5b6000611bb28484611f8f565b600080600080600060a0868803121561220657600080fd5b60006122128888611ff5565b955050602061222388828901611f8f565b945050604061223488828901611f8f565b935050606061224588828901611f8f565b925050608061225688828901611ff5565b9150509295509295909350565b60006020828403121561227557600080fd5b6000611bb28484612000565b61228a81612b59565b82525050565b61228a81612b64565b61228a81612b69565b60006122ae8385612b50565b93506122bb838584612b95565b6122c483612bd1565b9093019392505050565b60006122d982612b4c565b6122e38185612b50565b93506122f3818560208601612ba1565b6122c481612bd1565b600081546001811660008114612319576001811461233f5761237e565b607f600283041661232a8187612b50565b60ff198416815295505060208501925061237e565b6002820461234d8187612b50565b955061235885612b40565b60005b828110156123775781548882015260019091019060200161235b565b8701945050505b505092915050565b6000612393601683612b50565b751859d9dc9959d85d1bdc881b9bdd08195b98589b195960521b815260200192915050565b60006123c5603483612b50565b7f6f6e6c79207468652061646d696e206f7220677561726469616e206d61792064815273697361626c6520746865207265666572656e636560601b602082015260400192915050565b600061241b601283612b50565b711c9959995c995b98d9481b9bdd081d5cd95960721b815260200192915050565b6000612449602083612b50565b7f6f6e6c79207468652061646d696e206d617920736574206e65772061646d696e815260200192915050565b6000612482601983612b50565b7f7265666572656e636520697320616c7265616479207573656400000000000000815260200192915050565b60006124bb601a83612b50565b7f61676772656761746f7220697320616c72656164792075736564000000000000815260200192915050565b60006124f4600f83612b50565b6e6d69736d617463686564206461746160881b815260200192915050565b600061251f601383612b50565b721859d9dc9959d85d1bdc881b9bdd081d5cd959606a1b815260200192915050565b600061254e600d83612b50565b6c696e76616c696420707269636560981b815260200192915050565b6000612577602683612b50565b7f6f6e6c79207468652061646d696e206d617920736574207468652061676772658152656761746f727360d01b602082015260400192915050565b60006125bf602383612b50565b7f6f6e6c79207468652061646d696e206d617920736574206e657720677561726481526234b0b760e91b602082015260400192915050565b6000612604600d83612b50565b6c34b73b30b634b21030b236b4b760991b815260200192915050565b600061262d601883612b50565b7f756e737570706f727465642064656e6f6d696e6174696f6e0000000000000000815260200192915050565b6000612666602583612b50565b7f6f6e6c79207468652061646d696e206d61792073657420746865207265666572815264656e63657360d81b602082015260400192915050565b60006126ad600883612b50565b676e6f20707269636560c01b815260200192915050565b60006126d1603483612b50565b7f6f6e6c79207468652061646d696e206f7220677561726469616e206d617920658152733730b13632903a34329030b3b3b932b3b0ba37b960611b602082015260400192915050565b6000612727603383612b50565b7f6f6e6c79207468652061646d696e206f7220677561726469616e206d617920658152726e61626c6520746865207265666572656e636560681b602082015260400192915050565b600061277c603083612b50565b7f6f6e6c79207468652061646d696e206d6179207570646174652074686520646581526f7072656361746564206d61726b65747360801b602082015260400192915050565b60006127ce603583612b50565b7f6f6e6c79207468652061646d696e206f7220677561726469616e206d6179206481527434b9b0b13632903a34329030b3b3b932b3b0ba37b960591b602082015260400192915050565b61228a81611f0c565b60208101611bb68284612281565b6040810161283d8285612281565b611dfb6020830184612281565b608081016128588287612281565b6128656020830186612281565b6128726040830185612281565b61287f6060830184612290565b95945050505050565b606081016128968286612281565b6128a36020830185612281565b6128b06040830184612290565b949350505050565b604081016128c68285612281565b611dfb6020830184612290565b606081016128e18287612281565b81810360208301526128f48185876122a2565b905061287f6040830184612290565b606081016129118286612281565b818103602083015261292381856122fc565b90506128b06040830184612290565b60208101611bb68284612290565b60208101611bb68284612299565b604080825281016129608185876122a2565b9050818103602083015261287f81846122ce565b60208082528101611dfb81846122ce565b6040808252810161299681856122ce565b905081810360208301526128b081846122ce565b604080825281016129bb81856122ce565b9050611dfb6020830184612290565b6040808252810161299681856122fc565b60208082528101611bb681612386565b60208082528101611bb6816123b8565b60208082528101611bb68161240e565b60208082528101611bb68161243c565b60208082528101611bb681612475565b60208082528101611bb6816124ae565b60208082528101611bb6816124e7565b60208082528101611bb681612512565b60208082528101611bb681612541565b60208082528101611bb68161256a565b60208082528101611bb6816125b2565b60208082528101611bb6816125f7565b60208082528101611bb681612620565b60208082528101611bb681612659565b60208082528101611bb6816126a0565b60208082528101611bb6816126c4565b60208082528101611bb68161271a565b60208082528101611bb68161276f565b60208082528101611bb6816127c1565b60208101611bb68284612818565b60405181810167ffffffffffffffff81118282101715612b3857600080fd5b604052919050565b60009081526020902090565b5190565b90815260200190565b6000611bb682612b74565b151590565b6000611bb682612b59565b6001600160a01b031690565b60ff1690565b69ffffffffffffffffffff1690565b82818337506000910152565b60005b83811015612bbc578181015183820152602001612ba4565b83811115612bcb576000848401525b50505050565b601f01601f191690565b612be481612b59565b8114612bef57600080fd5b50565b612be481612b64565b612be481612b69565b612be481611f0c565b612be481612b80565b612be481612b8656fea365627a7a72315820fb72bb2199ff2dfe329423a3c7f845458a782637ab6eed8dcad22a501b2ce78a6c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c8063598853761161013b578063ae6a04d4116100b8578063f851a4401161007c578063f851a4401461041a578063f9ff41db14610422578063fc57d4df14610442578063fd760c4914610462578063fe10c98d1461046a5761023d565b8063ae6a04d4146103dc578063ca9d1a72146103ef578063e38e8c0f146103f7578063e774928e1461040a578063f37fcc42146104125761023d565b8063738fdd1a116100ff578063738fdd1a146103b45780638322fff2146103bc578063976d5e77146103c45780639db2a472146103cc578063a4a23595146103d45761023d565b806359885376146103525780635c8ed2f3146103655780636a5dd409146103865780636b09583c146103995780636dc3bb13146103a15761023d565b80632792949d116101c9578063452a93201161018d578063452a93201461031d57806345a4117314610325578063465bd0a31461033a57806353f7c3671461034257806356ef45141461034a5761023d565b80632792949d146102df578063294a2bf2146102e75780632e79477f146102ef5780633a74a767146102f75780634079f35d1461030a5761023d565b8063112cdab911610210578063112cdab91461028557806311748f1c146102a757806319342a64146102ba5780631bf6c21b146102c257806321a78f68146102ca5761023d565b806301b8b3391461024257806303d698f21461026057806309c71f4c146102685780630c0128341461027d575b600080fd5b61024a610472565b6040516102579190612821565b60405180910390f35b61024a610478565b61027b6102763660046120e8565b61047e565b005b61024a61063e565b61029861029336600461200b565b610643565b60405161025793929190612888565b61027b6102b536600461200b565b610675565b61024a61080a565b61024a61080f565b6102d2610815565b6040516102579190612940565b61024a610824565b61024a61083c565b61024a610842565b61027b61030536600461200b565b610848565b61027b6103183660046120e8565b6108f4565b61024a610c96565b61032d610ca5565b6040516102579190612974565b61024a610cc4565b61024a610cca565b61024a610cd0565b61027b61036036600461200b565b610cd6565b61037861037336600461200b565b610fa8565b6040516102579291906129aa565b61027b61039436600461200b565b611052565b61024a61111a565b61027b6103af36600461200b565b611120565b6102d2611200565b61024a61120f565b61024a611227565b61024a61122d565b61024a611233565b61027b6103ea366004612047565b611238565b61024a611754565b61027b61040536600461200b565b61175a565b61024a6117d5565b61024a6117db565b61024a6117e1565b61043561043036600461200b565b6117f0565b6040516102579190612932565b610455610450366004612194565b611805565b6040516102579190612b0b565b61024a611a61565b6102d2611a66565b61033a81565b61023681565b6000546001600160a01b031633146104b15760405162461bcd60e51b81526004016104a890612aeb565b60405180910390fd5b8281146104d05760405162461bcd60e51b81526004016104a890612a3b565b60005b83811015610637578282828181106104e757fe5b90506020020160206104fc9190810190612158565b15156007600087878581811061050e57fe5b9050602002016020610523919081019061200b565b6001600160a01b0316815260208101919091526040016000205460ff1615151461062f5782828281811061055357fe5b90506020020160206105689190810190612158565b6007600087878581811061057857fe5b905060200201602061058d919081019061200b565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557f2cd78fe8c13555e7f6dadd7b513f7be9549dc68a6b1853e95e8ae312dfa902e98585838181106105e257fe5b90506020020160206105f7919081019061200b565b84848481811061060357fe5b90506020020160206106189190810190612158565b6040516106269291906128b8565b60405180910390a15b6001016104d3565b5050505050565b602081565b600260205260009081526040902080546001909101546001600160a01b0391821691811690600160a01b900460ff1683565b6000546001600160a01b031633148061069857506001546001600160a01b031633145b6106b45760405162461bcd60e51b81526004016104a890612adb565b6001600160a01b0381166000908152600360205260409020600181015460ff16156106f15760405162461bcd60e51b81526004016104a890612a1b565b6106f9611e53565b60055460408051808201825260038152621554d160ea1b6020820152905163195556f360e21b81526001600160a01b03909216916365555bcc91610742918691906004016129ca565b60606040518083038186803b15801561075a57600080fd5b505afa15801561076e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061079291908101906121b2565b80519091506107b35760405162461bcd60e51b81526004016104a890612a5b565b6001828101805460ff1916909117908190556040517f4184c679f002966cd74ef1d937e6c4f542ce507b2fd2e398a9923caf31f4cc1f916107fd918691869160ff90911690612903565b60405180910390a1505050565b607c81565b61034881565b6005546001600160a01b031681565b73bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb81565b6103d281565b6102be81565b6000546001600160a01b031633146108725760405162461bcd60e51b81526004016104a890612a0b565b6001600160a01b0381166108985760405162461bcd60e51b81526004016104a890612a8b565b600080546001600160a01b0319166001600160a01b0383811691909117918290556040517f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1926108e9921690612821565b60405180910390a150565b6000546001600160a01b0316331461091e5760405162461bcd60e51b81526004016104a890612aab565b82811461093d5760405162461bcd60e51b81526004016104a890612a3b565b60005b8381101561063757600083838381811061095657fe5b602002820190508035601e193684900301811261097257600080fd5b9091016020810191503567ffffffffffffffff81111561099157600080fd5b368190038213156109a157600080fd5b159050610ac8575060016109b3611e53565b6005546001600160a01b03166365555bcc8686868181106109d057fe5b602002820190508035601e19368490030181126109ec57600080fd5b9091016020810191503567ffffffffffffffff811115610a0b57600080fd5b36819003821315610a1b57600080fd5b604051806040016040528060038152602001621554d160ea1b8152506040518463ffffffff1660e01b8152600401610a559392919061294e565b60606040518083038186803b158015610a6d57600080fd5b505afa158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aa591908101906121b2565b8051909150610ac65760405162461bcd60e51b81526004016104a890612a5b565b505b6040518060400160405280858585818110610adf57fe5b602002820190508035601e1936849003018112610afb57600080fd5b9091016020810191503567ffffffffffffffff811115610b1a57600080fd5b36819003821315610b2a57600080fd5b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505050831515602090920191909152600390888886818110610b7b57fe5b9050602002016020610b90919081019061200b565b6001600160a01b03168152602080820192909252604001600020825180519192610bbf92849290910190611e74565b50602091909101516001909101805460ff19169115159190911790557f4184c679f002966cd74ef1d937e6c4f542ce507b2fd2e398a9923caf31f4cc1f868684818110610c0857fe5b9050602002016020610c1d919081019061200b565b858585818110610c2957fe5b602002820190508035601e1936849003018112610c4557600080fd5b9091016020810191503567ffffffffffffffff811115610c6457600080fd5b36819003821315610c7457600080fd5b84604051610c8594939291906128d3565b60405180910390a150600101610940565b6001546001600160a01b031681565b604051806040016040528060038152602001621554d160ea1b81525081565b61018881565b61026081565b61019a81565b6000546001600160a01b0316331480610cf957506001546001600160a01b031633145b610d155760405162461bcd60e51b81526004016104a890612acb565b6001600160a01b03811660009081526002602052604090206001810154600160a01b900460ff1615610d595760405162461bcd60e51b81526004016104a890612a2b565b600480548254600184015460405163d2edb6dd60e01b81526000946001600160a01b039485169463d2edb6dd94610d9794908216939116910161282f565b60206040518083038186803b158015610daf57600080fd5b505afa158015610dc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610de79190810190612029565b6004805460405163b099d43b60e01b81529293506001600160a01b03169163b099d43b91610e1791859101612821565b60206040518083038186803b158015610e2f57600080fd5b505afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e679190810190612176565b610e835760405162461bcd60e51b81526004016104a8906129db565b600480548354600185015460405163bcfd032d60e01b81526000946001600160a01b039485169463bcfd032d94610ec194908216939116910161282f565b60a06040518083038186803b158015610ed957600080fd5b505afa158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f1191908101906121ee565b50505091505060008113610f375760405162461bcd60e51b81526004016104a890612a5b565b60018301805460ff60a01b1916600160a01b9081179182905584546040517f1ce411df4a158aa72e588cc62a13841fd7f7e644f81b10b60b90cb97b9017fa793610f9a9389936001600160a01b0390811693908316929190910460ff169061284a565b60405180910390a150505050565b60036020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290929183919083018282801561103f5780601f106110145761010080835404028352916020019161103f565b820191906000526020600020905b81548152906001019060200180831161102257829003601f168201915b5050506001909301549192505060ff1682565b6000546001600160a01b031633148061107557506001546001600160a01b031633145b6110915760405162461bcd60e51b81526004016104a8906129eb565b6001600160a01b0381166000908152600360205260409020600181015460ff166110cd5760405162461bcd60e51b81526004016104a8906129fb565b60018101805460ff191690556040517f4184c679f002966cd74ef1d937e6c4f542ce507b2fd2e398a9923caf31f4cc1f9061110e9084908490600090612903565b60405180910390a15050565b6103da81565b6000546001600160a01b031633148061114357506001546001600160a01b031633145b61115f5760405162461bcd60e51b81526004016104a890612afb565b6001600160a01b03811660009081526002602052604090206001810154600160a01b900460ff166111a25760405162461bcd60e51b81526004016104a890612a4b565b60018101805460ff60a01b1981169182905582546040517f1ce411df4a158aa72e588cc62a13841fd7f7e644f81b10b60b90cb97b9017fa79361110e9387936001600160a01b0390811693911691600160a01b900460ff169061284a565b6004546001600160a01b031681565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61028381565b6102c681565b609c81565b6000546001600160a01b031633146112625760405162461bcd60e51b81526004016104a890612a6b565b848314801561127057508481145b61128c5760405162461bcd60e51b81526004016104a890612a3b565b60005b8581101561174b576000808686848181106112a657fe5b90506020020160206112bb919081019061200b565b6001600160a01b0316146115a95773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8484848181106112ea57fe5b90506020020160206112ff919081019061200b565b6001600160a01b0316148061133e575061034884848481811061131e57fe5b9050602002016020611333919081019061200b565b6001600160a01b0316145b61135a5760405162461bcd60e51b81526004016104a890612a9b565b506004546001906000906001600160a01b031663d2edb6dd88888681811061137e57fe5b9050602002016020611393919081019061200b565b87878781811061139f57fe5b90506020020160206113b4919081019061200b565b6040518363ffffffff1660e01b81526004016113d192919061282f565b60206040518083038186803b1580156113e957600080fd5b505afa1580156113fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114219190810190612029565b6004805460405163b099d43b60e01b81529293506001600160a01b03169163b099d43b9161145191859101612821565b60206040518083038186803b15801561146957600080fd5b505afa15801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114a19190810190612176565b6114bd5760405162461bcd60e51b81526004016104a8906129db565b6004546000906001600160a01b031663bcfd032d8989878181106114dd57fe5b90506020020160206114f2919081019061200b565b8888888181106114fe57fe5b9050602002016020611513919081019061200b565b6040518363ffffffff1660e01b815260040161153092919061282f565b60a06040518083038186803b15801561154857600080fd5b505afa15801561155c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061158091908101906121ee565b505050915050600081136115a65760405162461bcd60e51b81526004016104a890612a5b565b50505b60405180606001604052808787858181106115c057fe5b90506020020160206115d5919081019061200b565b6001600160a01b031681526020018585858181106115ef57fe5b9050602002016020611604919081019061200b565b6001600160a01b03168152602001821515815250600260008a8a8681811061162857fe5b905060200201602061163d919081019061200b565b6001600160a01b0390811682526020808301939093526040918201600020845181549083166001600160a01b0319918216178255938501516001909101805495909301511515600160a01b0260ff60a01b19919092169490931693909317919091169190911790557f1ce411df4a158aa72e588cc62a13841fd7f7e644f81b10b60b90cb97b9017fa78888848181106116d257fe5b90506020020160206116e7919081019061200b565b8787858181106116f357fe5b9050602002016020611708919081019061200b565b86868681811061171457fe5b9050602002016020611729919081019061200b565b8460405161173a949392919061284a565b60405180910390a15060010161128f565b50505050505050565b61022a81565b6000546001600160a01b031633146117845760405162461bcd60e51b81526004016104a890612a7b565b600180546001600160a01b0319166001600160a01b0383811691909117918290556040517f31845eceb9cde510c7e8b37f76301c688feb70bc9653aa4c28a3734999840fd8926108e9921690612821565b61016481565b6102f481565b6000546001600160a01b031681565b60076020526000908152604090205460ff1681565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561184157600080fd5b505afa158015611855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118799190810190612029565b6001600160a01b0381166000908152600260205260409020600181015491925090600160a01b900460ff161561194957805460018201546000916118c9916001600160a01b039182169116611a75565b60018301549091506001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561193557600061191773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610348611a75565b905061193182604051806020016040528084815250611bbc565b9150505b61193f8184611be4565b9350505050611a5c565b6001600160a01b0382166000908152600360205260409020600181015460ff1615611a1a57805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152600092611a039285918301828280156119f95780601f106119ce576101008083540402835291602001916119f9565b820191906000526020600020905b8154815290600101906020018083116119dc57829003601f168201915b5050505050611c6d565b9050611a0f8185611be4565b945050505050611a5c565b6001600160a01b03831660009081526007602052604090205460ff1615611a445761193f83611d38565b60405162461bcd60e51b81526004016104a890612abb565b919050565b602481565b6006546001600160a01b031681565b6004805460405163bcfd032d60e01b815260009283926001600160a01b03169163bcfd032d91611aa991889188910161282f565b60a06040518083038186803b158015611ac157600080fd5b505afa158015611ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611af991908101906121ee565b50505091505060008113611b1f5760405162461bcd60e51b81526004016104a890612a5b565b60048054604051630b1c5a7560e31b8152611bb29284926001600160a01b0316916358e2d3a891611b54918a918a910161282f565b60206040518083038186803b158015611b6c57600080fd5b505afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ba49190810190612263565b60ff16601203600a0a611db9565b9150505b92915050565b6000670de0b6b3a7640000611bd5848460000151611db9565b81611bdc57fe5b049392505050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2057600080fd5b505afa158015611c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c589190810190612263565b60ff169050611bb28482601203600a0a611db9565b6000611c77611e53565b60055460408051808201825260038152621554d160ea1b6020820152905163195556f360e21b81526001600160a01b03909216916365555bcc91611cc091879190600401612985565b60606040518083038186803b158015611cd857600080fd5b505afa158015611cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d1091908101906121b2565b8051909150611d315760405162461bcd60e51b81526004016104a890612a5b565b5192915050565b6006546040516317a6948f60e21b81526000916001600160a01b031690635e9a523c90611d69908590600401612821565b60206040518083038186803b158015611d8157600080fd5b505afa158015611d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bb691908101906121d0565b6000611dfb83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250611e02565b9392505050565b6000831580611e0f575082155b15611e1c57506000611dfb565b83830283858281611e2957fe5b04148390611e4a5760405162461bcd60e51b81526004016104a89190612974565b50949350505050565b60405180606001604052806000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611eb557805160ff1916838001178555611ee2565b82800160010185558215611ee2579182015b82811115611ee2578251825591602001919060010190611ec7565b50611eee929150611ef2565b5090565b611f0c91905b80821115611eee5760008155600101611ef8565b90565b8035611bb681612bdb565b8051611bb681612bdb565b60008083601f840112611f3757600080fd5b50813567ffffffffffffffff811115611f4f57600080fd5b602083019150836020820283011115611f6757600080fd5b9250929050565b8035611bb681612bf2565b8051611bb681612bf2565b8035611bb681612bfb565b8051611bb681612c04565b600060608284031215611fac57600080fd5b611fb66060612b19565b90506000611fc48484611f8f565b8252506020611fd584848301611f8f565b6020830152506040611fe984828501611f8f565b60408301525092915050565b8051611bb681612c16565b8051611bb681612c0d565b60006020828403121561201d57600080fd5b6000611bb28484611f0f565b60006020828403121561203b57600080fd5b6000611bb28484611f1a565b6000806000806000806060878903121561206057600080fd5b863567ffffffffffffffff81111561207757600080fd5b61208389828a01611f25565b9650965050602087013567ffffffffffffffff8111156120a257600080fd5b6120ae89828a01611f25565b9450945050604087013567ffffffffffffffff8111156120cd57600080fd5b6120d989828a01611f25565b92509250509295509295509295565b600080600080604085870312156120fe57600080fd5b843567ffffffffffffffff81111561211557600080fd5b61212187828801611f25565b9450945050602085013567ffffffffffffffff81111561214057600080fd5b61214c87828801611f25565b95989497509550505050565b60006020828403121561216a57600080fd5b6000611bb28484611f6e565b60006020828403121561218857600080fd5b6000611bb28484611f79565b6000602082840312156121a657600080fd5b6000611bb28484611f84565b6000606082840312156121c457600080fd5b6000611bb28484611f9a565b6000602082840312156121e257600080fd5b6000611bb28484611f8f565b600080600080600060a0868803121561220657600080fd5b60006122128888611ff5565b955050602061222388828901611f8f565b945050604061223488828901611f8f565b935050606061224588828901611f8f565b925050608061225688828901611ff5565b9150509295509295909350565b60006020828403121561227557600080fd5b6000611bb28484612000565b61228a81612b59565b82525050565b61228a81612b64565b61228a81612b69565b60006122ae8385612b50565b93506122bb838584612b95565b6122c483612bd1565b9093019392505050565b60006122d982612b4c565b6122e38185612b50565b93506122f3818560208601612ba1565b6122c481612bd1565b600081546001811660008114612319576001811461233f5761237e565b607f600283041661232a8187612b50565b60ff198416815295505060208501925061237e565b6002820461234d8187612b50565b955061235885612b40565b60005b828110156123775781548882015260019091019060200161235b565b8701945050505b505092915050565b6000612393601683612b50565b751859d9dc9959d85d1bdc881b9bdd08195b98589b195960521b815260200192915050565b60006123c5603483612b50565b7f6f6e6c79207468652061646d696e206f7220677561726469616e206d61792064815273697361626c6520746865207265666572656e636560601b602082015260400192915050565b600061241b601283612b50565b711c9959995c995b98d9481b9bdd081d5cd95960721b815260200192915050565b6000612449602083612b50565b7f6f6e6c79207468652061646d696e206d617920736574206e65772061646d696e815260200192915050565b6000612482601983612b50565b7f7265666572656e636520697320616c7265616479207573656400000000000000815260200192915050565b60006124bb601a83612b50565b7f61676772656761746f7220697320616c72656164792075736564000000000000815260200192915050565b60006124f4600f83612b50565b6e6d69736d617463686564206461746160881b815260200192915050565b600061251f601383612b50565b721859d9dc9959d85d1bdc881b9bdd081d5cd959606a1b815260200192915050565b600061254e600d83612b50565b6c696e76616c696420707269636560981b815260200192915050565b6000612577602683612b50565b7f6f6e6c79207468652061646d696e206d617920736574207468652061676772658152656761746f727360d01b602082015260400192915050565b60006125bf602383612b50565b7f6f6e6c79207468652061646d696e206d617920736574206e657720677561726481526234b0b760e91b602082015260400192915050565b6000612604600d83612b50565b6c34b73b30b634b21030b236b4b760991b815260200192915050565b600061262d601883612b50565b7f756e737570706f727465642064656e6f6d696e6174696f6e0000000000000000815260200192915050565b6000612666602583612b50565b7f6f6e6c79207468652061646d696e206d61792073657420746865207265666572815264656e63657360d81b602082015260400192915050565b60006126ad600883612b50565b676e6f20707269636560c01b815260200192915050565b60006126d1603483612b50565b7f6f6e6c79207468652061646d696e206f7220677561726469616e206d617920658152733730b13632903a34329030b3b3b932b3b0ba37b960611b602082015260400192915050565b6000612727603383612b50565b7f6f6e6c79207468652061646d696e206f7220677561726469616e206d617920658152726e61626c6520746865207265666572656e636560681b602082015260400192915050565b600061277c603083612b50565b7f6f6e6c79207468652061646d696e206d6179207570646174652074686520646581526f7072656361746564206d61726b65747360801b602082015260400192915050565b60006127ce603583612b50565b7f6f6e6c79207468652061646d696e206f7220677561726469616e206d6179206481527434b9b0b13632903a34329030b3b3b932b3b0ba37b960591b602082015260400192915050565b61228a81611f0c565b60208101611bb68284612281565b6040810161283d8285612281565b611dfb6020830184612281565b608081016128588287612281565b6128656020830186612281565b6128726040830185612281565b61287f6060830184612290565b95945050505050565b606081016128968286612281565b6128a36020830185612281565b6128b06040830184612290565b949350505050565b604081016128c68285612281565b611dfb6020830184612290565b606081016128e18287612281565b81810360208301526128f48185876122a2565b905061287f6040830184612290565b606081016129118286612281565b818103602083015261292381856122fc565b90506128b06040830184612290565b60208101611bb68284612290565b60208101611bb68284612299565b604080825281016129608185876122a2565b9050818103602083015261287f81846122ce565b60208082528101611dfb81846122ce565b6040808252810161299681856122ce565b905081810360208301526128b081846122ce565b604080825281016129bb81856122ce565b9050611dfb6020830184612290565b6040808252810161299681856122fc565b60208082528101611bb681612386565b60208082528101611bb6816123b8565b60208082528101611bb68161240e565b60208082528101611bb68161243c565b60208082528101611bb681612475565b60208082528101611bb6816124ae565b60208082528101611bb6816124e7565b60208082528101611bb681612512565b60208082528101611bb681612541565b60208082528101611bb68161256a565b60208082528101611bb6816125b2565b60208082528101611bb6816125f7565b60208082528101611bb681612620565b60208082528101611bb681612659565b60208082528101611bb6816126a0565b60208082528101611bb6816126c4565b60208082528101611bb68161271a565b60208082528101611bb68161276f565b60208082528101611bb6816127c1565b60208101611bb68284612818565b60405181810167ffffffffffffffff81118282101715612b3857600080fd5b604052919050565b60009081526020902090565b5190565b90815260200190565b6000611bb682612b74565b151590565b6000611bb682612b59565b6001600160a01b031690565b60ff1690565b69ffffffffffffffffffff1690565b82818337506000910152565b60005b83811015612bbc578181015183820152602001612ba4565b83811115612bcb576000848401525b50505050565b601f01601f191690565b612be481612b59565b8114612bef57600080fd5b50565b612be481612b64565b612be481612b69565b612be481611f0c565b612be481612b80565b612be481612b8656fea365627a7a72315820fb72bb2199ff2dfe329423a3c7f845458a782637ab6eed8dcad22a501b2ce78a6c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "methods": {
      "_disableAggregator(address)": {
        "params": {
          "tokenAddress": "The underlying token"
        }
      },
      "_disableReference(address)": {
        "params": {
          "tokenAddress": "The underlying token"
        }
      },
      "_enableAggregator(address)": {
        "params": {
          "tokenAddress": "The underlying token"
        }
      },
      "_enableReference(address)": {
        "params": {
          "tokenAddress": "The underlying token"
        }
      },
      "_setAdmin(address)": {
        "params": {
          "_admin": "The new admin"
        }
      },
      "_setAggregators(address[],address[],address[])": {
        "params": {
          "bases": "The list of ChainLink aggregator bases",
          "quotes": "The list of ChainLink aggregator quotes, currently support 'ETH' and 'USD'",
          "tokenAddresses": "The list of underlying tokens"
        }
      },
      "_setGuardian(address)": {
        "params": {
          "_guardian": "The new guardian"
        }
      },
      "_setReferences(address[],string[])": {
        "params": {
          "symbols": "The list of symbols used by Band reference",
          "tokenAddresses": "The list of underlying tokens"
        }
      },
      "_updateDeprecatedMarkets(address[],bool[])": {
        "params": {
          "deprecated": "The list of tokens are deprecated or not",
          "tokenAddresses": "The list of underlying tokens"
        }
      },
      "constructor": {
        "params": {
          "admin_": "The address of admin to set aggregators",
          "reference_": "The address of Band reference",
          "registry_": "The address of ChainLink registry",
          "v1PriceOracle_": "The v1 price oracle"
        }
      },
      "getUnderlyingPrice(address)": {
        "params": {
          "cToken": "The cToken to get the underlying price of"
        },
        "return": "The underlying asset price mantissa (scaled by 1e18)"
      }
    }
  },
  "userdoc": {
    "methods": {
      "_disableAggregator(address)": {
        "notice": "Disable ChainLink aggregator"
      },
      "_disableReference(address)": {
        "notice": "Disable Band reference"
      },
      "_enableAggregator(address)": {
        "notice": "Enable ChainLink aggregator"
      },
      "_enableReference(address)": {
        "notice": "Enable Band reference"
      },
      "_setAdmin(address)": {
        "notice": "Set admin for price oracle proxy"
      },
      "_setAggregators(address[],address[],address[])": {
        "notice": "Set ChainLink aggregators for multiple tokens"
      },
      "_setGuardian(address)": {
        "notice": "Set guardian for price oracle proxy"
      },
      "_setReferences(address[],string[])": {
        "notice": "Set Band references for multiple tokens"
      },
      "_updateDeprecatedMarkets(address[],bool[])": {
        "notice": "Update deprecated markets for multiple tokens"
      },
      "getUnderlyingPrice(address)": {
        "notice": "Get the underlying price of a listed cToken asset"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35820,
        "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 35822,
        "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
        "label": "guardian",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 35838,
        "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
        "label": "aggregators",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AggregatorInfo)35829_storage)"
      },
      {
        "astId": 35842,
        "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
        "label": "references",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(ReferenceInfo)35834_storage)"
      },
      {
        "astId": 35844,
        "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
        "label": "reg",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(FeedRegistryInterface)37027"
      },
      {
        "astId": 35846,
        "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
        "label": "ref",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(StdReferenceInterface)36931"
      },
      {
        "astId": 35848,
        "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
        "label": "v1PriceOracle",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(V1PriceOracleInterface)37279"
      },
      {
        "astId": 35852,
        "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
        "label": "deprecatedMarkets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FeedRegistryInterface)37027": {
        "encoding": "inplace",
        "label": "contract FeedRegistryInterface",
        "numberOfBytes": "20"
      },
      "t_contract(StdReferenceInterface)36931": {
        "encoding": "inplace",
        "label": "contract StdReferenceInterface",
        "numberOfBytes": "20"
      },
      "t_contract(V1PriceOracleInterface)37279": {
        "encoding": "inplace",
        "label": "contract V1PriceOracleInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AggregatorInfo)35829_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PriceOracleProxyIB.AggregatorInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AggregatorInfo)35829_storage"
      },
      "t_mapping(t_address,t_struct(ReferenceInfo)35834_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PriceOracleProxyIB.ReferenceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ReferenceInfo)35834_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AggregatorInfo)35829_storage": {
        "encoding": "inplace",
        "label": "struct PriceOracleProxyIB.AggregatorInfo",
        "members": [
          {
            "astId": 35824,
            "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
            "label": "base",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 35826,
            "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
            "label": "quote",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 35828,
            "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
            "label": "isUsed",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ReferenceInfo)35834_storage": {
        "encoding": "inplace",
        "label": "struct PriceOracleProxyIB.ReferenceInfo",
        "members": [
          {
            "astId": 35831,
            "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
            "label": "symbol",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 35833,
            "contract": "contracts/PriceOracle/PriceOracleProxyIB.sol:PriceOracleProxyIB",
            "label": "isUsed",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}