{
  "address": "0x6e6Eb84716c032F2Fe9ef9bf1965cB0e76989d22",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manualBurner",
          "type": "address"
        },
        {
          "internalType": "contract IComptroller",
          "name": "_comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBurner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBurner",
          "type": "address"
        }
      ],
      "name": "BurnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "Dispatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "name": "DispatcherSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldManualBurner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newManualBurner",
          "type": "address"
        }
      ],
      "name": "ManualBurnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "wasBlocked",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBlocked",
          "type": "bool"
        }
      ],
      "name": "MarketBlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "wasManual",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isManual",
          "type": "bool"
        }
      ],
      "name": "MarketManualBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "NativeMarketUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRatio",
          "type": "uint256"
        }
      ],
      "name": "RatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenSeized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COOLDOWN_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRatio",
          "type": "uint256"
        }
      ],
      "name": "adjustRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "burners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokenAdmins",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IComptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "dispatchMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dispatcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isBlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isNativeMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "manualBurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manualBurner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reservesSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalReserves",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "blocked",
          "type": "bool[]"
        }
      ],
      "name": "setBlocked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "newBurners",
          "type": "address[]"
        }
      ],
      "name": "setBurners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDispatcher",
          "type": "address"
        }
      ],
      "name": "setDispatcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "manual",
          "type": "bool[]"
        }
      ],
      "name": "setManualBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManualBurner",
          "type": "address"
        }
      ],
      "name": "setManualBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "name": "setNativeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4e60deddff2c2bc747306d91b4e08cf49e7693c936fbac3fae764852021b1103",
  "receipt": {
    "to": null,
    "from": "0x1BA608D6a354fbEb41FD7cC799e7f09b2612AB26",
    "contractAddress": "0x6e6Eb84716c032F2Fe9ef9bf1965cB0e76989d22",
    "transactionIndex": 0,
    "gasUsed": "1948339",
    "logsBloom": "0x
    "blockHash": "0xca8005ab6b48e8cb51359ad69c03198d00cb05a53e6bc2987552bc76ea03a1bc",
    "transactionHash": "0x4e60deddff2c2bc747306d91b4e08cf49e7693c936fbac3fae764852021b1103",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12661936,
        "transactionHash": "0x4e60deddff2c2bc747306d91b4e08cf49e7693c936fbac3fae764852021b1103",
        "address": "0x6e6Eb84716c032F2Fe9ef9bf1965cB0e76989d22",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ba608d6a354fbeb41fd7cc799e7f09b2612ab26"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xca8005ab6b48e8cb51359ad69c03198d00cb05a53e6bc2987552bc76ea03a1bc"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12661936,
        "transactionHash": "0x4e60deddff2c2bc747306d91b4e08cf49e7693c936fbac3fae764852021b1103",
        "address": "0x6e6Eb84716c032F2Fe9ef9bf1965cB0e76989d22",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000001ba608d6a354fbeb41fd7cc799e7f09b2612ab26",
          "0x0000000000000000000000001ba608d6a354fbeb41fd7cc799e7f09b2612ab26"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xca8005ab6b48e8cb51359ad69c03198d00cb05a53e6bc2987552bc76ea03a1bc"
      }
    ],
    "blockNumber": 12661936,
    "cumulativeGasUsed": "1948339",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1BA608D6a354fbEb41FD7cC799e7f09b2612AB26",
    "0xfB9423283EB7F65210B9aB545ecC212B5AE52b3A",
    "0xE0B57FEEd45e7D908f2d0DaCd26F113Cf26715BF",
    "0x4200000000000000000000000000000000000006",
    "0x7F5c764cBc14f9669B88837ca1490cCa17c31607"
  ],
  "numDeployments": 1,
  "solcInputHash": "024dcc8854bb8c7e9e8da8cc57bb91f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manualBurner\",\"type\":\"address\"},{\"internalType\":\"contract IComptroller\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBurner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"BurnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"Dispatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"DispatcherSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldManualBurner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManualBurner\",\"type\":\"address\"}],\"name\":\"ManualBurnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"wasBlocked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlocked\",\"type\":\"bool\"}],\"name\":\"MarketBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"wasManual\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isManual\",\"type\":\"bool\"}],\"name\":\"MarketManualBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"NativeMarketUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"RatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSeized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"adjustRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokenAdmins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"dispatchMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isNativeMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manualBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualBurner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservesSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"blocked\",\"type\":\"bool[]\"}],\"name\":\"setBlocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"newBurners\",\"type\":\"address[]\"}],\"name\":\"setBurners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDispatcher\",\"type\":\"address\"}],\"name\":\"setDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"manual\",\"type\":\"bool[]\"}],\"name\":\"setManualBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManualBurner\",\"type\":\"address\"}],\"name\":\"setManualBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"name\":\"setNativeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"adjustRatio(uint256)\":{\"params\":{\"newRatio\":\"The new extraction ratio\"}},\"dispatchMultiple(address[])\":{\"params\":{\"cTokens\":\"The token address list\"}},\"getBlockTimestamp()\":{\"returns\":{\"_0\":\"The current block timestamp\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"seize(address,uint256)\":{\"params\":{\"amount\":\"The amount\",\"token\":\"The token\"}},\"setBlocked(address[],bool[])\":{\"params\":{\"blocked\":\"Block from reserves sharing or not\",\"cTokens\":\"The cToken address list\"}},\"setBurners(address[],address[])\":{\"params\":{\"cTokens\":\"The cToken address list\",\"newBurners\":\"The burner address list\"}},\"setDispatcher(address)\":{\"params\":{\"newDispatcher\":\"The new dispatcher\"}},\"setManualBurn(address[],bool[])\":{\"params\":{\"cTokens\":\"The cToken address list\",\"manual\":\"The list of markets which should be burnt manually or not\"}},\"setManualBurner(address)\":{\"params\":{\"newManualBurner\":\"The new manual burner\"}},\"setNativeMarket(address,bool)\":{\"params\":{\"cToken\":\"The cToken address\",\"isNative\":\"It's native or not\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"BurnerUpdated(address,address,address)\":{\"notice\":\"Emitted when a cToken's burner is updated\"},\"Dispatch(address,uint256,address)\":{\"notice\":\"Emitted when reserves are dispatched\"},\"DispatcherSet(address)\":{\"notice\":\"Emitted when a dispatcher is set\"},\"ManualBurnerUpdated(address,address)\":{\"notice\":\"Emitted when a manual burner is updated\"},\"MarketBlocked(address,bool,bool)\":{\"notice\":\"Emitted when a cToken market is blocked or unblocked from reserves sharing\"},\"MarketManualBurn(address,bool,bool)\":{\"notice\":\"Emitted when a cToken market is determined to be manually burnt or not\"},\"NativeMarketUpdated(address,bool)\":{\"notice\":\"Emitted when a native market is updated\"},\"RatioUpdated(uint256,uint256)\":{\"notice\":\"Emitted when the reserves extraction ratio is updated\"},\"TokenSeized(address,uint256)\":{\"notice\":\"Emitted when a token is seized\"}},\"kind\":\"user\",\"methods\":{\"adjustRatio(uint256)\":{\"notice\":\"Adjust the extraction ratio\"},\"burners(address)\":{\"notice\":\"burner contracts to convert assets into a specific token\"},\"cTokenAdmins(address)\":{\"notice\":\"cToken admin to extract reserves\"},\"comptroller()\":{\"notice\":\"comptroller contract\"},\"dispatchMultiple(address[])\":{\"notice\":\"Execute reduce reserve and burn on multiple cTokens\"},\"dispatcher()\":{\"notice\":\"a dispatcher that could dispatch reserves.\"},\"getBlockTimestamp()\":{\"notice\":\"Get the current block timestamp\"},\"isBlocked(address)\":{\"notice\":\"return if a cToken market is blocked from reserves sharing\"},\"isNativeMarket(address)\":{\"notice\":\"return if a cToken market is native token or not.\"},\"manualBurn(address)\":{\"notice\":\"return if a cToken market should be burnt manually\"},\"manualBurner()\":{\"notice\":\"a manual burner that reseives assets whose onchain liquidity are not deep enough\"},\"ratio()\":{\"notice\":\"the extraction ratio, scaled by 1e18\"},\"reservesSnapshot(address)\":{\"notice\":\"reserves snapshot that records every reserves update\"},\"seize(address,uint256)\":{\"notice\":\"Seize the accidentally deposited tokens\"},\"setBlocked(address[],bool[])\":{\"notice\":\"Block or unblock a cToken from reserves sharing\"},\"setBurners(address[],address[])\":{\"notice\":\"Set the burners of a list of tokens\"},\"setDispatcher(address)\":{\"notice\":\"Set the new dispatcher\"},\"setManualBurn(address[],bool[])\":{\"notice\":\"Determine a market should be burnt manually or not\"},\"setManualBurner(address)\":{\"notice\":\"Set new manual burner\"},\"setNativeMarket(address,bool)\":{\"notice\":\"Seize the accidentally deposited tokens\"},\"usdcAddress()\":{\"notice\":\"usdc contract\"},\"wethAddress()\":{\"notice\":\"weth contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reserve-manager/ReserveManager.sol\":\"ReserveManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/reserve-manager/ReserveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IComptroller.sol\\\";\\nimport \\\"./interfaces/ICToken.sol\\\";\\nimport \\\"./interfaces/ICTokenAdmin.sol\\\";\\nimport \\\"./interfaces/IBurner.sol\\\";\\nimport \\\"./interfaces/IWeth.sol\\\";\\n\\ncontract ReserveManager is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint public constant COOLDOWN_PERIOD = 1 days;\\n    address public constant ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @notice comptroller contract\\n     */\\n    IComptroller public immutable comptroller;\\n\\n    /**\\n     * @notice weth contract\\n     */\\n    address public immutable wethAddress;\\n\\n    /**\\n     * @notice usdc contract\\n     */\\n    address public immutable usdcAddress;\\n\\n    /**\\n     * @notice the extraction ratio, scaled by 1e18\\n     */\\n    uint public ratio = 0.5e18;\\n\\n    /**\\n     * @notice cToken admin to extract reserves\\n     */\\n    mapping(address => address) public cTokenAdmins;\\n\\n    /**\\n     * @notice burner contracts to convert assets into a specific token\\n     */\\n    mapping(address => address) public burners;\\n\\n    struct ReservesSnapshot {\\n        uint timestamp;\\n        uint totalReserves;\\n    }\\n\\n    /**\\n     * @notice reserves snapshot that records every reserves update\\n     */\\n    mapping(address => ReservesSnapshot) public reservesSnapshot;\\n\\n    /**\\n     * @notice return if a cToken market is blocked from reserves sharing\\n     */\\n    mapping(address => bool) public isBlocked;\\n\\n    /**\\n     * @notice return if a cToken market should be burnt manually\\n     */\\n    mapping(address => bool) public manualBurn;\\n\\n    /**\\n     * @notice a manual burner that reseives assets whose onchain liquidity are not deep enough\\n     */\\n    address public manualBurner;\\n\\n    /**\\n     * @notice return if a cToken market is native token or not.\\n     */\\n    mapping(address => bool) public isNativeMarket;\\n\\n    /**\\n     * @notice a dispatcher that could dispatch reserves.\\n     */\\n    address public dispatcher;\\n\\n    /**\\n     * @notice Emitted when reserves are dispatched\\n     */\\n    event Dispatch(\\n        address indexed token,\\n        uint indexed amount,\\n        address destination\\n    );\\n\\n    /**\\n     * @notice Emitted when a cToken's burner is updated\\n     */\\n    event BurnerUpdated(\\n        address cToken,\\n        address oldBurner,\\n        address newBurner\\n    );\\n\\n    /**\\n     * @notice Emitted when the reserves extraction ratio is updated\\n     */\\n    event RatioUpdated(\\n        uint oldRatio,\\n        uint newRatio\\n    );\\n\\n    /**\\n     * @notice Emitted when a token is seized\\n     */\\n    event TokenSeized(\\n        address token,\\n        uint amount\\n    );\\n\\n    /**\\n     * @notice Emitted when a cToken market is blocked or unblocked from reserves sharing\\n     */\\n    event MarketBlocked(\\n        address cToken,\\n        bool wasBlocked,\\n        bool isBlocked\\n    );\\n\\n    /**\\n     * @notice Emitted when a cToken market is determined to be manually burnt or not\\n     */\\n    event MarketManualBurn(\\n        address cToken,\\n        bool wasManual,\\n        bool isManual\\n    );\\n\\n    /**\\n     * @notice Emitted when a manual burner is updated\\n     */\\n    event ManualBurnerUpdated(\\n        address oldManualBurner,\\n        address newManualBurner\\n    );\\n\\n    /**\\n     * @notice Emitted when a native market is updated\\n     */\\n    event NativeMarketUpdated(\\n        address cToken,\\n        bool isNative\\n    );\\n\\n    /**\\n     * @notice Emitted when a dispatcher is set\\n     */\\n    event DispatcherSet(address dispatcher);\\n\\n    constructor(\\n        address _owner,\\n        address _manualBurner,\\n        IComptroller _comptroller,\\n        address _wethAddress,\\n        address _usdcAddress\\n    ) {\\n        transferOwnership(_owner);\\n        manualBurner = _manualBurner;\\n        comptroller = _comptroller;\\n        wethAddress = _wethAddress;\\n        usdcAddress = _usdcAddress;\\n\\n        // Set default ratio to 50%.\\n        ratio = 0.5e18;\\n    }\\n\\n    /**\\n     * @notice Get the current block timestamp\\n     * @return The current block timestamp\\n     */\\n    function getBlockTimestamp() public virtual view returns (uint) {\\n        return block.timestamp;\\n    }\\n\\n    receive() external payable {}\\n\\n    /* Mutative functions */\\n\\n    /**\\n     * @notice Execute reduce reserve and burn on multiple cTokens\\n     * @param cTokens The token address list\\n     */\\n    function dispatchMultiple(address[] memory cTokens) external nonReentrant {\\n        require(msg.sender == owner() || msg.sender == dispatcher, \\\"unauthorized\\\");\\n\\n        for (uint i = 0; i < cTokens.length; i++) {\\n            dispatch(cTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Seize the accidentally deposited tokens\\n     * @param token The token\\n     * @param amount The amount\\n     */\\n    function seize(address token, uint amount) external onlyOwner {\\n        if (token == ethAddress) {\\n            payable(owner()).transfer(amount);\\n        } else {\\n            IERC20(token).safeTransfer(owner(), amount);\\n        }\\n        emit TokenSeized(token, amount);\\n    }\\n\\n    /**\\n     * @notice Block or unblock a cToken from reserves sharing\\n     * @param cTokens The cToken address list\\n     * @param blocked Block from reserves sharing or not\\n     */\\n    function setBlocked(address[] memory cTokens, bool[] memory blocked) external onlyOwner {\\n        require(cTokens.length == blocked.length, \\\"invalid data\\\");\\n\\n        for (uint i = 0; i < cTokens.length; i++) {\\n            bool wasBlocked = isBlocked[cTokens[i]];\\n            isBlocked[cTokens[i]] = blocked[i];\\n\\n            emit MarketBlocked(cTokens[i], wasBlocked, blocked[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the burners of a list of tokens\\n     * @param cTokens The cToken address list\\n     * @param newBurners The burner address list\\n     */\\n    function setBurners(address[] memory cTokens, address[] memory newBurners) external onlyOwner {\\n        require(cTokens.length == newBurners.length, \\\"invalid data\\\");\\n\\n        for (uint i = 0; i < cTokens.length; i++) {\\n            address oldBurner = burners[cTokens[i]];\\n            burners[cTokens[i]] = newBurners[i];\\n\\n            emit BurnerUpdated(cTokens[i], oldBurner, newBurners[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Determine a market should be burnt manually or not\\n     * @param cTokens The cToken address list\\n     * @param manual The list of markets which should be burnt manually or not\\n     */\\n    function setManualBurn(address[] memory cTokens, bool[] memory manual) external onlyOwner {\\n        require(cTokens.length == manual.length, \\\"invalid data\\\");\\n\\n        for (uint i = 0; i < cTokens.length; i++) {\\n            bool wasManual = manualBurn[cTokens[i]];\\n            manualBurn[cTokens[i]] = manual[i];\\n\\n            emit MarketManualBurn(cTokens[i], wasManual, manual[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set new manual burner\\n     * @param newManualBurner The new manual burner\\n     */\\n    function setManualBurner(address newManualBurner) external onlyOwner {\\n        require(newManualBurner != address(0), \\\"invalid new manual burner\\\");\\n\\n        address oldManualBurner = manualBurner;\\n        manualBurner = newManualBurner;\\n\\n        emit ManualBurnerUpdated(oldManualBurner, newManualBurner);\\n    }\\n\\n    /**\\n     * @notice Adjust the extraction ratio\\n     * @param newRatio The new extraction ratio\\n     */\\n    function adjustRatio(uint newRatio) external onlyOwner {\\n        require(newRatio <= 1e18, \\\"invalid ratio\\\");\\n\\n        uint oldRatio = ratio;\\n        ratio = newRatio;\\n        emit RatioUpdated(oldRatio, newRatio);\\n    }\\n\\n    /**\\n     * @notice Seize the accidentally deposited tokens\\n     * @param cToken The cToken address\\n     * @param isNative It's native or not\\n     */\\n    function setNativeMarket(address cToken, bool isNative) external onlyOwner {\\n        if (isNativeMarket[cToken] != isNative) {\\n            isNativeMarket[cToken] = isNative;\\n            emit NativeMarketUpdated(cToken, isNative);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the new dispatcher\\n     * @param newDispatcher The new dispatcher\\n     */\\n    function setDispatcher(address newDispatcher) external onlyOwner {\\n        dispatcher = newDispatcher;\\n\\n        emit DispatcherSet(newDispatcher);\\n    }\\n\\n    /* Internal functions */\\n\\n    /**\\n     * @notice Execute reduce reserve for cToken\\n     * @param cToken The cToken to dispatch reduce reserve operation\\n     */\\n    function dispatch(address cToken) internal {\\n        require(!isBlocked[cToken], \\\"market is blocked from reserves sharing\\\");\\n        require(comptroller.isMarketListed(cToken), \\\"market not listed\\\");\\n\\n        uint totalReserves = ICToken(cToken).totalReserves();\\n        ReservesSnapshot memory snapshot = reservesSnapshot[cToken];\\n        if (snapshot.timestamp > 0 && snapshot.totalReserves < totalReserves) {\\n            address cTokenAdmin = ICToken(cToken).admin();\\n            require(snapshot.timestamp + COOLDOWN_PERIOD <= getBlockTimestamp(), \\\"still in the cooldown period\\\");\\n\\n            // Extract reserves through cTokenAdmin.\\n            uint reduceAmount = (totalReserves - snapshot.totalReserves) * ratio / 1e18;\\n            ICTokenAdmin(cTokenAdmin).extractReserves(cToken, reduceAmount);\\n\\n            // Get total reserves from cToken again for snapshots.\\n            totalReserves = ICToken(cToken).totalReserves();\\n\\n            // Get the cToken underlying.\\n            address underlying;\\n            if (isNativeMarket[cToken]) {\\n                IWeth(wethAddress).deposit{value: reduceAmount}();\\n                underlying = wethAddress;\\n            } else {\\n                underlying = ICToken(cToken).underlying();\\n            }\\n\\n            // In case someone transfers tokens in directly, which will cause the dispatch reverted,\\n            // we burn all the tokens in the contract here.\\n            uint burnAmount = IERC20(underlying).balanceOf(address(this));\\n\\n            address burner = burners[cToken];\\n            if (manualBurn[cToken]) {\\n                // Send the underlying to the manual burner.\\n                burner = manualBurner;\\n                IERC20(underlying).safeTransfer(manualBurner, burnAmount);\\n            } else {\\n                // Allow the corresponding burner to pull the assets to burn.\\n                require(burner != address(0), \\\"burner not set\\\");\\n                IERC20(underlying).safeIncreaseAllowance(burner, burnAmount);\\n                IBurner(burner).burn(underlying);\\n            }\\n\\n            emit Dispatch(underlying, burnAmount, burner);\\n        }\\n\\n        // Update the reserve snapshot.\\n        reservesSnapshot[cToken] = ReservesSnapshot({\\n            timestamp: getBlockTimestamp(),\\n            totalReserves: totalReserves\\n        });\\n    }\\n}\\n\",\"keccak256\":\"0xc39f91ffad5d58a305051a6213445f275d3f87d3559508b19d1d96181cc79be9\",\"license\":\"MIT\"},\"contracts/reserve-manager/interfaces/IBurner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBurner {\\n    function burn(address coin) external returns (uint);\\n}\\n\",\"keccak256\":\"0x30270b7aa9f695159c0a2765bd5c77da3a42a2705d8b504ac1b3c26e38d399a9\",\"license\":\"MIT\"},\"contracts/reserve-manager/interfaces/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICToken {\\n    function admin() external view returns (address);\\n    function symbol() external view returns (string memory);\\n    function underlying() external view returns (address);\\n    function totalReserves() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x90f3c41a19b1ed299e739c466b94ac13871d53d7f4421ab62df43e5cd8e1b692\",\"license\":\"MIT\"},\"contracts/reserve-manager/interfaces/ICTokenAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICTokenAdmin {\\n    function extractReserves(address cToken, uint reduceAmount) external;\\n}\\n\",\"keccak256\":\"0x8734136e609b0511d734f9ba3b4db4c6a27319abd9338beed94a7995c326a13f\",\"license\":\"MIT\"},\"contracts/reserve-manager/interfaces/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IComptroller {\\n    function isMarketListed(address cTokenAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ac5b8e44d9bd30e988b140a0071ef467138e19c88a9abf98120036ddf7c2af9\",\"license\":\"MIT\"},\"contracts/reserve-manager/interfaces/IWeth.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWeth {\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0xdb9891a58e4e0687e4e3d9edd06ceaf45f9182a8372e32f77c955d158a2e7b62\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526706f05b59d3b200006002553480156200001d57600080fd5b5060405162002309380380620023098339810160408190526200004091620001d3565b6200004b3362000098565b600180556200005a85620000e8565b600880546001600160a01b0319166001600160a01b03958616179055918316608052821660a0521660c052506706f05b59d3b2000060025562000253565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620001af5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200013f565b620001ba8162000098565b50565b6001600160a01b0381168114620001ba57600080fd5b600080600080600060a08688031215620001ec57600080fd5b8551620001f981620001bd565b60208701519095506200020c81620001bd565b60408701519094506200021f81620001bd565b60608701519093506200023281620001bd565b60808701519092506200024581620001bd565b809150509295509295909350565b60805160a05160c0516120716200029860003960006101be015260008181610318015281816114ce01526115420152600081816103cc015261118901526120716000f3fe6080604052600436106101a05760003560e01c80636e99d52f116100ec578063cb7e90571161008a578063eb9253c011610064578063eb9253c01461053f578063f2fde38b1461055f578063f92dc3e91461057f578063fbac3951146105b557600080fd5b8063cb7e9057146104df578063d1056f32146104ff578063d1448ea01461051f57600080fd5b8063796b89b9116100c6578063796b89b91461046e57806380a52f13146104815780638da5cb5b146104a1578063ba22bd76146104bf57600080fd5b80636e99d52f1461041e578063715018a61461044357806371ca337d1461045857600080fd5b806341398b1511610159578063585d332d11610133578063585d332d1461035a57806359fb459e1461037a5780635fe3b567146103ba57806366cadfba146103ee57600080fd5b806341398b15146102de5780634f0e0ef314610306578063507448431461033a57600080fd5b806302d45457146101ac57806303d41e0e146101fd57806311d9850e146102335780632a6823651461027c578063305775881461029e57806337a7a334146102be57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101e07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020957600080fd5b506101e0610218366004611b6e565b6004602052600090815260409020546001600160a01b031681565b34801561023f57600080fd5b5061026761024e366004611b6e565b6005602052600090815260409020805460019091015482565b604080519283526020830191909152016101f4565b34801561028857600080fd5b5061029c610297366004611c78565b6105e5565b005b3480156102aa57600080fd5b5061029c6102b9366004611d3c565b6107a7565b3480156102ca57600080fd5b5061029c6102d9366004611d75565b61085c565b3480156102ea57600080fd5b506101e073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561031257600080fd5b506101e07f000000000000000000000000000000000000000000000000000000000000000081565b34801561034657600080fd5b5061029c610355366004611b6e565b61090c565b34801561036657600080fd5b5061029c610375366004611c78565b6109e6565b34801561038657600080fd5b506103aa610395366004611b6e565b60076020526000908152604090205460ff1681565b60405190151581526020016101f4565b3480156103c657600080fd5b506101e07f000000000000000000000000000000000000000000000000000000000000000081565b3480156103fa57600080fd5b506103aa610409366004611b6e565b60096020526000908152604090205460ff1681565b34801561042a57600080fd5b506104356201518081565b6040519081526020016101f4565b34801561044f57600080fd5b5061029c610b9a565b34801561046457600080fd5b5061043560025481565b34801561047a57600080fd5b5042610435565b34801561048d57600080fd5b5061029c61049c366004611d8e565b610bd0565b3480156104ad57600080fd5b506000546001600160a01b03166101e0565b3480156104cb57600080fd5b5061029c6104da366004611b6e565b610d97565b3480156104eb57600080fd5b50600a546101e0906001600160a01b031681565b34801561050b57600080fd5b506008546101e0906001600160a01b031681565b34801561052b57600080fd5b5061029c61053a366004611df2565b610e15565b34801561054b57600080fd5b5061029c61055a366004611e2f565b610f13565b34801561056b57600080fd5b5061029c61057a366004611b6e565b611006565b34801561058b57600080fd5b506101e061059a366004611b6e565b6003602052600090815260409020546001600160a01b031681565b3480156105c157600080fd5b506103aa6105d0366004611b6e565b60066020526000908152604090205460ff1681565b6000546001600160a01b031633146106185760405162461bcd60e51b815260040161060f90611e5b565b60405180910390fd5b80518251146106395760405162461bcd60e51b815260040161060f90611e90565b60005b82518110156107a25760006006600085848151811061065d5761065d611eb6565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff1690508282815181106106a7576106a7611eb6565b6020026020010151600660008685815181106106c5576106c5611eb6565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe708a906b7e44981bc320303a1b40ebac3e7e5fc33044ee8c98f9d441e83231484838151811061073757610737611eb6565b60200260200101518285858151811061075257610752611eb6565b6020026020010151604051610787939291906001600160a01b0393909316835290151560208301521515604082015260600190565b60405180910390a1508061079a81611ee2565b91505061063c565b505050565b6000546001600160a01b031633146107d15760405162461bcd60e51b815260040161060f90611e5b565b6001600160a01b03821660009081526009602052604090205460ff16151581151514610858576001600160a01b038216600081815260096020908152604091829020805460ff19168515159081179091558251938452908301527f85a031e5867bb0d8b29f51514ec1e5686b88de5ef85b20e21951b69d60ae275e91015b60405180910390a15b5050565b6000546001600160a01b031633146108865760405162461bcd60e51b815260040161060f90611e5b565b670de0b6b3a76400008111156108ce5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420726174696f60981b604482015260640161060f565b600280549082905560408051828152602081018490527f3edd74a0325c6bec69d13fe3535717e39b00ff7b4d7aaa83efef9094b33b9683910161084f565b6000546001600160a01b031633146109365760405162461bcd60e51b815260040161060f90611e5b565b6001600160a01b03811661098c5760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964206e6577206d616e75616c206275726e657200000000000000604482015260640161060f565b600880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f70faf679176d368ef646486262569090d32c93046b12c561b83aef24a599c740910161084f565b6000546001600160a01b03163314610a105760405162461bcd60e51b815260040161060f90611e5b565b8051825114610a315760405162461bcd60e51b815260040161060f90611e90565b60005b82518110156107a257600060076000858481518110610a5557610a55611eb6565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff169050828281518110610a9f57610a9f611eb6565b602002602001015160076000868581518110610abd57610abd611eb6565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f0eebbabfe76e717b9d64b861d8bd5c15a4dcb87e132a5131797fcabcdaec306e848381518110610b2f57610b2f611eb6565b602002602001015182858581518110610b4a57610b4a611eb6565b6020026020010151604051610b7f939291906001600160a01b0393909316835290151560208301521515604082015260600190565b60405180910390a15080610b9281611ee2565b915050610a34565b6000546001600160a01b03163314610bc45760405162461bcd60e51b815260040161060f90611e5b565b610bce60006110a1565b565b6000546001600160a01b03163314610bfa5760405162461bcd60e51b815260040161060f90611e5b565b8051825114610c1b5760405162461bcd60e51b815260040161060f90611e90565b60005b82518110156107a257600060046000858481518110610c3f57610c3f611eb6565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03169050828281518110610c8f57610c8f611eb6565b602002602001015160046000868581518110610cad57610cad611eb6565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f1157fb8d6658622c605f6808d98008e2678911cdb4fd0af271f559b0f29ea949848381518110610d2c57610d2c611eb6565b602002602001015182858581518110610d4757610d47611eb6565b6020026020010151604051610d7c939291906001600160a01b0393841681529183166020830152909116604082015260600190565b60405180910390a15080610d8f81611ee2565b915050610c1e565b6000546001600160a01b03163314610dc15760405162461bcd60e51b815260040161060f90611e5b565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f76fb8a637e2dd165327482ba43c5a87f91ae0db340dd5c17d7dcbde2266dfb2c9060200160405180910390a150565b60026001541415610e685760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161060f565b60026001556000546001600160a01b0316331480610e905750600a546001600160a01b031633145b610ecb5760405162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b604482015260640161060f565b60005b8151811015610f0b57610ef9828281518110610eec57610eec611eb6565b60200260200101516110f1565b80610f0381611ee2565b915050610ece565b505060018055565b6000546001600160a01b03163314610f3d5760405162461bcd60e51b815260040161060f90611e5b565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610fa157600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610f9b573d6000803e3d6000fd5b50610fc7565b610fc7610fb66000546001600160a01b031690565b6001600160a01b03841690836117e9565b604080516001600160a01b0384168152602081018390527fb930d7c3c6896f70ea10a959f1d9a7c04e0467138efa4c7040570d4b8f4894b6910161084f565b6000546001600160a01b031633146110305760405162461bcd60e51b815260040161060f90611e5b565b6001600160a01b0381166110955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060f565b61109e816110a1565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526006602052604090205460ff161561116a5760405162461bcd60e51b815260206004820152602760248201527f6d61726b657420697320626c6f636b65642066726f6d2072657365727665732060448201526673686172696e6760c81b606482015260840161060f565b604051633d98a1e560e01b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690633d98a1e590602401602060405180830381865afa1580156111d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f49190611efd565b6112345760405162461bcd60e51b81526020600482015260116024820152701b585c9ad95d081b9bdd081b1a5cdd1959607a1b604482015260640161060f565b6000816001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112989190611f1a565b6001600160a01b038316600090815260056020908152604091829020825180840190935280548084526001909101549183019190915291925090158015906112e35750818160200151105b1561179f576000836001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190611f33565b905042825161135f906201518090611f50565b11156113ad5760405162461bcd60e51b815260206004820152601c60248201527f7374696c6c20696e2074686520636f6f6c646f776e20706572696f6400000000604482015260640161060f565b6000670de0b6b3a76400006002548460200151866113cb9190611f68565b6113d59190611f7f565b6113df9190611f9e565b6040516307da3c1d60e01b81526001600160a01b03878116600483015260248201839052919250908316906307da3c1d90604401600060405180830381600087803b15801561142d57600080fd5b505af1158015611441573d6000803e3d6000fd5b50505050846001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a79190611f1a565b6001600160a01b0386166000908152600960205260408120549195509060ff1615611568577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561152757600080fd5b505af115801561153b573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000090506115cd565b856001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ca9190611f33565b90505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116389190611f1a565b6001600160a01b03808916600090815260046020908152604080832054600790925290912054929350169060ff161561168d57506008546001600160a01b039081169061168890841682846117e9565b611756565b6001600160a01b0381166116d45760405162461bcd60e51b815260206004820152600e60248201526d189d5c9b995c881b9bdd081cd95d60921b604482015260640161060f565b6116e86001600160a01b038416828461184c565b60405163226bf2d160e21b81526001600160a01b0384811660048301528216906389afcb44906024016020604051808303816000875af1158015611730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117549190611f1a565b505b6040516001600160a01b0382811682528391908516907f3046a3d146b187c183dda3e958fabea0fd764b952de1b2e98e30f946ddc2aa569060200160405180910390a350505050505b60405180604001604052806117b14290565b81526020908101939093526001600160a01b039093166000908152600583526040902083518155929091015160019092019190915550565b6040516001600160a01b0383166024820152604481018290526107a290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611904565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801561189d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c19190611f1a565b6118cb9190611f50565b6040516001600160a01b0385166024820152604481018290529091506118fe90859063095ea7b360e01b90606401611815565b50505050565b6000611959826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119d69092919063ffffffff16565b8051909150156107a257808060200190518101906119779190611efd565b6107a25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161060f565b60606119e584846000856119ef565b90505b9392505050565b606082471015611a505760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161060f565b6001600160a01b0385163b611aa75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060f565b600080866001600160a01b03168587604051611ac39190611fec565b60006040518083038185875af1925050503d8060008114611b00576040519150601f19603f3d011682016040523d82523d6000602084013e611b05565b606091505b5091509150611b15828286611b20565b979650505050505050565b60608315611b2f5750816119e8565b825115611b3f5782518084602001fd5b8160405162461bcd60e51b815260040161060f9190612008565b6001600160a01b038116811461109e57600080fd5b600060208284031215611b8057600080fd5b81356119e881611b59565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611bca57611bca611b8b565b604052919050565b600067ffffffffffffffff821115611bec57611bec611b8b565b5060051b60200190565b600082601f830112611c0757600080fd5b81356020611c1c611c1783611bd2565b611ba1565b82815260059290921b84018101918181019086841115611c3b57600080fd5b8286015b84811015611c5f578035611c5281611b59565b8352918301918301611c3f565b509695505050505050565b801515811461109e57600080fd5b60008060408385031215611c8b57600080fd5b823567ffffffffffffffff80821115611ca357600080fd5b611caf86838701611bf6565b9350602091508185013581811115611cc657600080fd5b85019050601f81018613611cd957600080fd5b8035611ce7611c1782611bd2565b81815260059190911b82018301908381019088831115611d0657600080fd5b928401925b82841015611d2d578335611d1e81611c6a565b82529284019290840190611d0b565b80955050505050509250929050565b60008060408385031215611d4f57600080fd5b8235611d5a81611b59565b91506020830135611d6a81611c6a565b809150509250929050565b600060208284031215611d8757600080fd5b5035919050565b60008060408385031215611da157600080fd5b823567ffffffffffffffff80821115611db957600080fd5b611dc586838701611bf6565b93506020850135915080821115611ddb57600080fd5b50611de885828601611bf6565b9150509250929050565b600060208284031215611e0457600080fd5b813567ffffffffffffffff811115611e1b57600080fd5b611e2784828501611bf6565b949350505050565b60008060408385031215611e4257600080fd5b8235611e4d81611b59565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b696e76616c6964206461746160a01b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611ef657611ef6611ecc565b5060010190565b600060208284031215611f0f57600080fd5b81516119e881611c6a565b600060208284031215611f2c57600080fd5b5051919050565b600060208284031215611f4557600080fd5b81516119e881611b59565b60008219821115611f6357611f63611ecc565b500190565b600082821015611f7a57611f7a611ecc565b500390565b6000816000190483118215151615611f9957611f99611ecc565b500290565b600082611fbb57634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015611fdb578181015183820152602001611fc3565b838111156118fe5750506000910152565b60008251611ffe818460208701611fc0565b9190910192915050565b6020815260008251806020840152612027816040850160208701611fc0565b601f01601f1916919091016040019291505056fea26469706673582212206ab23bd9c7092be71a6a0dfdf6a83a11b1c11a58757edbaebcc60cf0362aa1a964736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c80636e99d52f116100ec578063cb7e90571161008a578063eb9253c011610064578063eb9253c01461053f578063f2fde38b1461055f578063f92dc3e91461057f578063fbac3951146105b557600080fd5b8063cb7e9057146104df578063d1056f32146104ff578063d1448ea01461051f57600080fd5b8063796b89b9116100c6578063796b89b91461046e57806380a52f13146104815780638da5cb5b146104a1578063ba22bd76146104bf57600080fd5b80636e99d52f1461041e578063715018a61461044357806371ca337d1461045857600080fd5b806341398b1511610159578063585d332d11610133578063585d332d1461035a57806359fb459e1461037a5780635fe3b567146103ba57806366cadfba146103ee57600080fd5b806341398b15146102de5780634f0e0ef314610306578063507448431461033a57600080fd5b806302d45457146101ac57806303d41e0e146101fd57806311d9850e146102335780632a6823651461027c578063305775881461029e57806337a7a334146102be57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101e07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020957600080fd5b506101e0610218366004611b6e565b6004602052600090815260409020546001600160a01b031681565b34801561023f57600080fd5b5061026761024e366004611b6e565b6005602052600090815260409020805460019091015482565b604080519283526020830191909152016101f4565b34801561028857600080fd5b5061029c610297366004611c78565b6105e5565b005b3480156102aa57600080fd5b5061029c6102b9366004611d3c565b6107a7565b3480156102ca57600080fd5b5061029c6102d9366004611d75565b61085c565b3480156102ea57600080fd5b506101e073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561031257600080fd5b506101e07f000000000000000000000000000000000000000000000000000000000000000081565b34801561034657600080fd5b5061029c610355366004611b6e565b61090c565b34801561036657600080fd5b5061029c610375366004611c78565b6109e6565b34801561038657600080fd5b506103aa610395366004611b6e565b60076020526000908152604090205460ff1681565b60405190151581526020016101f4565b3480156103c657600080fd5b506101e07f000000000000000000000000000000000000000000000000000000000000000081565b3480156103fa57600080fd5b506103aa610409366004611b6e565b60096020526000908152604090205460ff1681565b34801561042a57600080fd5b506104356201518081565b6040519081526020016101f4565b34801561044f57600080fd5b5061029c610b9a565b34801561046457600080fd5b5061043560025481565b34801561047a57600080fd5b5042610435565b34801561048d57600080fd5b5061029c61049c366004611d8e565b610bd0565b3480156104ad57600080fd5b506000546001600160a01b03166101e0565b3480156104cb57600080fd5b5061029c6104da366004611b6e565b610d97565b3480156104eb57600080fd5b50600a546101e0906001600160a01b031681565b34801561050b57600080fd5b506008546101e0906001600160a01b031681565b34801561052b57600080fd5b5061029c61053a366004611df2565b610e15565b34801561054b57600080fd5b5061029c61055a366004611e2f565b610f13565b34801561056b57600080fd5b5061029c61057a366004611b6e565b611006565b34801561058b57600080fd5b506101e061059a366004611b6e565b6003602052600090815260409020546001600160a01b031681565b3480156105c157600080fd5b506103aa6105d0366004611b6e565b60066020526000908152604090205460ff1681565b6000546001600160a01b031633146106185760405162461bcd60e51b815260040161060f90611e5b565b60405180910390fd5b80518251146106395760405162461bcd60e51b815260040161060f90611e90565b60005b82518110156107a25760006006600085848151811061065d5761065d611eb6565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff1690508282815181106106a7576106a7611eb6565b6020026020010151600660008685815181106106c5576106c5611eb6565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe708a906b7e44981bc320303a1b40ebac3e7e5fc33044ee8c98f9d441e83231484838151811061073757610737611eb6565b60200260200101518285858151811061075257610752611eb6565b6020026020010151604051610787939291906001600160a01b0393909316835290151560208301521515604082015260600190565b60405180910390a1508061079a81611ee2565b91505061063c565b505050565b6000546001600160a01b031633146107d15760405162461bcd60e51b815260040161060f90611e5b565b6001600160a01b03821660009081526009602052604090205460ff16151581151514610858576001600160a01b038216600081815260096020908152604091829020805460ff19168515159081179091558251938452908301527f85a031e5867bb0d8b29f51514ec1e5686b88de5ef85b20e21951b69d60ae275e91015b60405180910390a15b5050565b6000546001600160a01b031633146108865760405162461bcd60e51b815260040161060f90611e5b565b670de0b6b3a76400008111156108ce5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420726174696f60981b604482015260640161060f565b600280549082905560408051828152602081018490527f3edd74a0325c6bec69d13fe3535717e39b00ff7b4d7aaa83efef9094b33b9683910161084f565b6000546001600160a01b031633146109365760405162461bcd60e51b815260040161060f90611e5b565b6001600160a01b03811661098c5760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964206e6577206d616e75616c206275726e657200000000000000604482015260640161060f565b600880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f70faf679176d368ef646486262569090d32c93046b12c561b83aef24a599c740910161084f565b6000546001600160a01b03163314610a105760405162461bcd60e51b815260040161060f90611e5b565b8051825114610a315760405162461bcd60e51b815260040161060f90611e90565b60005b82518110156107a257600060076000858481518110610a5557610a55611eb6565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff169050828281518110610a9f57610a9f611eb6565b602002602001015160076000868581518110610abd57610abd611eb6565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f0eebbabfe76e717b9d64b861d8bd5c15a4dcb87e132a5131797fcabcdaec306e848381518110610b2f57610b2f611eb6565b602002602001015182858581518110610b4a57610b4a611eb6565b6020026020010151604051610b7f939291906001600160a01b0393909316835290151560208301521515604082015260600190565b60405180910390a15080610b9281611ee2565b915050610a34565b6000546001600160a01b03163314610bc45760405162461bcd60e51b815260040161060f90611e5b565b610bce60006110a1565b565b6000546001600160a01b03163314610bfa5760405162461bcd60e51b815260040161060f90611e5b565b8051825114610c1b5760405162461bcd60e51b815260040161060f90611e90565b60005b82518110156107a257600060046000858481518110610c3f57610c3f611eb6565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03169050828281518110610c8f57610c8f611eb6565b602002602001015160046000868581518110610cad57610cad611eb6565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f1157fb8d6658622c605f6808d98008e2678911cdb4fd0af271f559b0f29ea949848381518110610d2c57610d2c611eb6565b602002602001015182858581518110610d4757610d47611eb6565b6020026020010151604051610d7c939291906001600160a01b0393841681529183166020830152909116604082015260600190565b60405180910390a15080610d8f81611ee2565b915050610c1e565b6000546001600160a01b03163314610dc15760405162461bcd60e51b815260040161060f90611e5b565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f76fb8a637e2dd165327482ba43c5a87f91ae0db340dd5c17d7dcbde2266dfb2c9060200160405180910390a150565b60026001541415610e685760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161060f565b60026001556000546001600160a01b0316331480610e905750600a546001600160a01b031633145b610ecb5760405162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b604482015260640161060f565b60005b8151811015610f0b57610ef9828281518110610eec57610eec611eb6565b60200260200101516110f1565b80610f0381611ee2565b915050610ece565b505060018055565b6000546001600160a01b03163314610f3d5760405162461bcd60e51b815260040161060f90611e5b565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610fa157600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610f9b573d6000803e3d6000fd5b50610fc7565b610fc7610fb66000546001600160a01b031690565b6001600160a01b03841690836117e9565b604080516001600160a01b0384168152602081018390527fb930d7c3c6896f70ea10a959f1d9a7c04e0467138efa4c7040570d4b8f4894b6910161084f565b6000546001600160a01b031633146110305760405162461bcd60e51b815260040161060f90611e5b565b6001600160a01b0381166110955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060f565b61109e816110a1565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526006602052604090205460ff161561116a5760405162461bcd60e51b815260206004820152602760248201527f6d61726b657420697320626c6f636b65642066726f6d2072657365727665732060448201526673686172696e6760c81b606482015260840161060f565b604051633d98a1e560e01b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690633d98a1e590602401602060405180830381865afa1580156111d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f49190611efd565b6112345760405162461bcd60e51b81526020600482015260116024820152701b585c9ad95d081b9bdd081b1a5cdd1959607a1b604482015260640161060f565b6000816001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112989190611f1a565b6001600160a01b038316600090815260056020908152604091829020825180840190935280548084526001909101549183019190915291925090158015906112e35750818160200151105b1561179f576000836001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190611f33565b905042825161135f906201518090611f50565b11156113ad5760405162461bcd60e51b815260206004820152601c60248201527f7374696c6c20696e2074686520636f6f6c646f776e20706572696f6400000000604482015260640161060f565b6000670de0b6b3a76400006002548460200151866113cb9190611f68565b6113d59190611f7f565b6113df9190611f9e565b6040516307da3c1d60e01b81526001600160a01b03878116600483015260248201839052919250908316906307da3c1d90604401600060405180830381600087803b15801561142d57600080fd5b505af1158015611441573d6000803e3d6000fd5b50505050846001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a79190611f1a565b6001600160a01b0386166000908152600960205260408120549195509060ff1615611568577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561152757600080fd5b505af115801561153b573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000090506115cd565b856001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ca9190611f33565b90505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116389190611f1a565b6001600160a01b03808916600090815260046020908152604080832054600790925290912054929350169060ff161561168d57506008546001600160a01b039081169061168890841682846117e9565b611756565b6001600160a01b0381166116d45760405162461bcd60e51b815260206004820152600e60248201526d189d5c9b995c881b9bdd081cd95d60921b604482015260640161060f565b6116e86001600160a01b038416828461184c565b60405163226bf2d160e21b81526001600160a01b0384811660048301528216906389afcb44906024016020604051808303816000875af1158015611730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117549190611f1a565b505b6040516001600160a01b0382811682528391908516907f3046a3d146b187c183dda3e958fabea0fd764b952de1b2e98e30f946ddc2aa569060200160405180910390a350505050505b60405180604001604052806117b14290565b81526020908101939093526001600160a01b039093166000908152600583526040902083518155929091015160019092019190915550565b6040516001600160a01b0383166024820152604481018290526107a290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611904565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801561189d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c19190611f1a565b6118cb9190611f50565b6040516001600160a01b0385166024820152604481018290529091506118fe90859063095ea7b360e01b90606401611815565b50505050565b6000611959826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119d69092919063ffffffff16565b8051909150156107a257808060200190518101906119779190611efd565b6107a25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161060f565b60606119e584846000856119ef565b90505b9392505050565b606082471015611a505760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161060f565b6001600160a01b0385163b611aa75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060f565b600080866001600160a01b03168587604051611ac39190611fec565b60006040518083038185875af1925050503d8060008114611b00576040519150601f19603f3d011682016040523d82523d6000602084013e611b05565b606091505b5091509150611b15828286611b20565b979650505050505050565b60608315611b2f5750816119e8565b825115611b3f5782518084602001fd5b8160405162461bcd60e51b815260040161060f9190612008565b6001600160a01b038116811461109e57600080fd5b600060208284031215611b8057600080fd5b81356119e881611b59565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611bca57611bca611b8b565b604052919050565b600067ffffffffffffffff821115611bec57611bec611b8b565b5060051b60200190565b600082601f830112611c0757600080fd5b81356020611c1c611c1783611bd2565b611ba1565b82815260059290921b84018101918181019086841115611c3b57600080fd5b8286015b84811015611c5f578035611c5281611b59565b8352918301918301611c3f565b509695505050505050565b801515811461109e57600080fd5b60008060408385031215611c8b57600080fd5b823567ffffffffffffffff80821115611ca357600080fd5b611caf86838701611bf6565b9350602091508185013581811115611cc657600080fd5b85019050601f81018613611cd957600080fd5b8035611ce7611c1782611bd2565b81815260059190911b82018301908381019088831115611d0657600080fd5b928401925b82841015611d2d578335611d1e81611c6a565b82529284019290840190611d0b565b80955050505050509250929050565b60008060408385031215611d4f57600080fd5b8235611d5a81611b59565b91506020830135611d6a81611c6a565b809150509250929050565b600060208284031215611d8757600080fd5b5035919050565b60008060408385031215611da157600080fd5b823567ffffffffffffffff80821115611db957600080fd5b611dc586838701611bf6565b93506020850135915080821115611ddb57600080fd5b50611de885828601611bf6565b9150509250929050565b600060208284031215611e0457600080fd5b813567ffffffffffffffff811115611e1b57600080fd5b611e2784828501611bf6565b949350505050565b60008060408385031215611e4257600080fd5b8235611e4d81611b59565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b696e76616c6964206461746160a01b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611ef657611ef6611ecc565b5060010190565b600060208284031215611f0f57600080fd5b81516119e881611c6a565b600060208284031215611f2c57600080fd5b5051919050565b600060208284031215611f4557600080fd5b81516119e881611b59565b60008219821115611f6357611f63611ecc565b500190565b600082821015611f7a57611f7a611ecc565b500390565b6000816000190483118215151615611f9957611f99611ecc565b500290565b600082611fbb57634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015611fdb578181015183820152602001611fc3565b838111156118fe5750506000910152565b60008251611ffe818460208701611fc0565b9190910192915050565b6020815260008251806020840152612027816040850160208701611fc0565b601f01601f1916919091016040019291505056fea26469706673582212206ab23bd9c7092be71a6a0dfdf6a83a11b1c11a58757edbaebcc60cf0362aa1a964736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "adjustRatio(uint256)": {
        "params": {
          "newRatio": "The new extraction ratio"
        }
      },
      "dispatchMultiple(address[])": {
        "params": {
          "cTokens": "The token address list"
        }
      },
      "getBlockTimestamp()": {
        "returns": {
          "_0": "The current block timestamp"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "seize(address,uint256)": {
        "params": {
          "amount": "The amount",
          "token": "The token"
        }
      },
      "setBlocked(address[],bool[])": {
        "params": {
          "blocked": "Block from reserves sharing or not",
          "cTokens": "The cToken address list"
        }
      },
      "setBurners(address[],address[])": {
        "params": {
          "cTokens": "The cToken address list",
          "newBurners": "The burner address list"
        }
      },
      "setDispatcher(address)": {
        "params": {
          "newDispatcher": "The new dispatcher"
        }
      },
      "setManualBurn(address[],bool[])": {
        "params": {
          "cTokens": "The cToken address list",
          "manual": "The list of markets which should be burnt manually or not"
        }
      },
      "setManualBurner(address)": {
        "params": {
          "newManualBurner": "The new manual burner"
        }
      },
      "setNativeMarket(address,bool)": {
        "params": {
          "cToken": "The cToken address",
          "isNative": "It's native or not"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BurnerUpdated(address,address,address)": {
        "notice": "Emitted when a cToken's burner is updated"
      },
      "Dispatch(address,uint256,address)": {
        "notice": "Emitted when reserves are dispatched"
      },
      "DispatcherSet(address)": {
        "notice": "Emitted when a dispatcher is set"
      },
      "ManualBurnerUpdated(address,address)": {
        "notice": "Emitted when a manual burner is updated"
      },
      "MarketBlocked(address,bool,bool)": {
        "notice": "Emitted when a cToken market is blocked or unblocked from reserves sharing"
      },
      "MarketManualBurn(address,bool,bool)": {
        "notice": "Emitted when a cToken market is determined to be manually burnt or not"
      },
      "NativeMarketUpdated(address,bool)": {
        "notice": "Emitted when a native market is updated"
      },
      "RatioUpdated(uint256,uint256)": {
        "notice": "Emitted when the reserves extraction ratio is updated"
      },
      "TokenSeized(address,uint256)": {
        "notice": "Emitted when a token is seized"
      }
    },
    "kind": "user",
    "methods": {
      "adjustRatio(uint256)": {
        "notice": "Adjust the extraction ratio"
      },
      "burners(address)": {
        "notice": "burner contracts to convert assets into a specific token"
      },
      "cTokenAdmins(address)": {
        "notice": "cToken admin to extract reserves"
      },
      "comptroller()": {
        "notice": "comptroller contract"
      },
      "dispatchMultiple(address[])": {
        "notice": "Execute reduce reserve and burn on multiple cTokens"
      },
      "dispatcher()": {
        "notice": "a dispatcher that could dispatch reserves."
      },
      "getBlockTimestamp()": {
        "notice": "Get the current block timestamp"
      },
      "isBlocked(address)": {
        "notice": "return if a cToken market is blocked from reserves sharing"
      },
      "isNativeMarket(address)": {
        "notice": "return if a cToken market is native token or not."
      },
      "manualBurn(address)": {
        "notice": "return if a cToken market should be burnt manually"
      },
      "manualBurner()": {
        "notice": "a manual burner that reseives assets whose onchain liquidity are not deep enough"
      },
      "ratio()": {
        "notice": "the extraction ratio, scaled by 1e18"
      },
      "reservesSnapshot(address)": {
        "notice": "reserves snapshot that records every reserves update"
      },
      "seize(address,uint256)": {
        "notice": "Seize the accidentally deposited tokens"
      },
      "setBlocked(address[],bool[])": {
        "notice": "Block or unblock a cToken from reserves sharing"
      },
      "setBurners(address[],address[])": {
        "notice": "Set the burners of a list of tokens"
      },
      "setDispatcher(address)": {
        "notice": "Set the new dispatcher"
      },
      "setManualBurn(address[],bool[])": {
        "notice": "Determine a market should be burnt manually or not"
      },
      "setManualBurner(address)": {
        "notice": "Set new manual burner"
      },
      "setNativeMarket(address,bool)": {
        "notice": "Seize the accidentally deposited tokens"
      },
      "usdcAddress()": {
        "notice": "usdc contract"
      },
      "wethAddress()": {
        "notice": "weth contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1143,
        "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1786,
        "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5862,
        "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
        "label": "ratio",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5867,
        "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
        "label": "cTokenAdmins",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5872,
        "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
        "label": "burners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5883,
        "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
        "label": "reservesSnapshot",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(ReservesSnapshot)5877_storage)"
      },
      {
        "astId": 5888,
        "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
        "label": "isBlocked",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5893,
        "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
        "label": "manualBurn",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5896,
        "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
        "label": "manualBurner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5901,
        "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
        "label": "isNativeMarket",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5904,
        "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
        "label": "dispatcher",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ReservesSnapshot)5877_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ReserveManager.ReservesSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(ReservesSnapshot)5877_storage"
      },
      "t_struct(ReservesSnapshot)5877_storage": {
        "encoding": "inplace",
        "label": "struct ReserveManager.ReservesSnapshot",
        "members": [
          {
            "astId": 5874,
            "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5876,
            "contract": "contracts/reserve-manager/ReserveManager.sol:ReserveManager",
            "label": "totalReserves",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}