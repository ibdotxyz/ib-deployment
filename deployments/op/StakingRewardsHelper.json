{
  "address": "0x970D6b8c1479ec2bfE5a82dC69caFe4003099bC0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNative",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenSeized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "stakingRewards",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "stakingRewards",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "toNative",
          "type": "bool"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "toNative",
          "type": "bool"
        }
      ],
      "name": "exitAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract StakingRewardsFactoryInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "getRewardTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "rewardTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "rewardTokenDecimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct StakingRewardsHelper.RewardTokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "rewardTokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "rate",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StakingRewardsHelper.RewardRate[]",
              "name": "rewardRates",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct StakingRewardsHelper.StakingInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "rewardTokens",
          "type": "address[]"
        }
      ],
      "name": "getUserClaimableRewards",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "rewardTokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "rewardTokenSymbol",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "rewardTokenDecimals",
                  "type": "uint8"
                }
              ],
              "internalType": "struct StakingRewardsHelper.RewardTokenInfo",
              "name": "rewardToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingRewardsHelper.RewardClaimable[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserStaked",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingRewardsHelper.UserStaked[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingRewards",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "toNative",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xead76c418b21a8090a58a1ac6ea9552308244e74d7a92f145fd5d2d74403f316",
  "receipt": {
    "to": null,
    "from": "0x1BA608D6a354fbEb41FD7cC799e7f09b2612AB26",
    "contractAddress": "0x970D6b8c1479ec2bfE5a82dC69caFe4003099bC0",
    "transactionIndex": 0,
    "gasUsed": "2570652",
    "logsBloom": "0x
    "blockHash": "0x7e344d772f5c59407361655de59181e46587139b0e31230565e1409a335ed2e4",
    "transactionHash": "0xead76c418b21a8090a58a1ac6ea9552308244e74d7a92f145fd5d2d74403f316",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24491101,
        "transactionHash": "0xead76c418b21a8090a58a1ac6ea9552308244e74d7a92f145fd5d2d74403f316",
        "address": "0x970D6b8c1479ec2bfE5a82dC69caFe4003099bC0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ba608d6a354fbeb41fd7cc799e7f09b2612ab26"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7e344d772f5c59407361655de59181e46587139b0e31230565e1409a335ed2e4"
      }
    ],
    "blockNumber": 24491101,
    "cumulativeGasUsed": "2570652",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x35F70CE60f049A8c21721C53a1dFCcB5bF4a1Ea8",
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 3,
  "solcInputHash": "677a3c38db267946beacf26fdc20c023",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSeized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakingRewards\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakingRewards\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"toNative\",\"type\":\"bool\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"toNative\",\"type\":\"bool\"}],\"name\":\"exitAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract StakingRewardsFactoryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"getRewardTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct StakingRewardsHelper.RewardTokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingRewardsHelper.RewardRate[]\",\"name\":\"rewardRates\",\"type\":\"tuple[]\"}],\"internalType\":\"struct StakingRewardsHelper.StakingInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"name\":\"getUserClaimableRewards\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct StakingRewardsHelper.RewardTokenInfo\",\"name\":\"rewardToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingRewardsHelper.RewardClaimable[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserStaked\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingRewardsHelper.UserStaked[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingRewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toNative\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimRewards(address[])\":{\"params\":{\"stakingRewards\":\"The list of staking rewards\"}},\"exit(address[],bool)\":{\"params\":{\"stakingRewards\":\"The list of staking rewards\",\"toNative\":\"Unwrap to native token or not\"}},\"exitAll(bool)\":{\"params\":{\"toNative\":\"Unwrap to native token or not\"}},\"getRewardTokenInfo(address)\":{\"params\":{\"rewardToken\":\"The reward token\"},\"returns\":{\"_0\":\"The reward token info\"}},\"getStakingInfo()\":{\"returns\":{\"_0\":\"The list of staking info\"}},\"getUserClaimableRewards(address,address[])\":{\"params\":{\"account\":\"The account\",\"rewardTokens\":\"The list of reward tokens\"},\"returns\":{\"_0\":\"The list of user claimable rewards\"}},\"getUserStaked(address)\":{\"params\":{\"account\":\"The account\"},\"returns\":{\"_0\":\"The list of user staked info\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"seize(address,uint256)\":{\"params\":{\"amount\":\"The amount\",\"token\":\"The token\"}},\"stake(address,uint256)\":{\"params\":{\"amount\":\"The amount\",\"underlying\":\"The underlying token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(address,uint256,bool)\":{\"params\":{\"amount\":\"The amount\",\"stakingRewards\":\"The staking rewards\",\"toNative\":\"Unwrap to native token or not\"}}},\"version\":1},\"userdoc\":{\"events\":{\"TokenSeized(address,uint256)\":{\"notice\":\"Emitted when tokens are seized\"}},\"kind\":\"user\",\"methods\":{\"claimAllRewards()\":{\"notice\":\"Claim all rewards\"},\"claimRewards(address[])\":{\"notice\":\"Claim rewards by given staking rewards\"},\"exit(address[],bool)\":{\"notice\":\"Exit staking rewards\"},\"exitAll(bool)\":{\"notice\":\"Exit all staking rewards\"},\"getRewardTokenInfo(address)\":{\"notice\":\"Getthe reward token info\"},\"getStakingInfo()\":{\"notice\":\"Get all the staking info\"},\"getUserClaimableRewards(address,address[])\":{\"notice\":\"Get user claimable rewards\"},\"getUserStaked(address)\":{\"notice\":\"Get user staked info\"},\"seize(address,uint256)\":{\"notice\":\"Seize tokens in this contract.\"},\"stake(address,uint256)\":{\"notice\":\"Mint and stake tokens into staking rewards\"},\"stakeNative()\":{\"notice\":\"Mint native and stake tokens into staking rewards\"},\"unstake(address,uint256,bool)\":{\"notice\":\"Unstake tokens from staking rewards and redeem\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking-rewards/StakingRewardsHelper.sol\":\"StakingRewardsHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/staking-rewards/StakingRewardsHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ITokenInterface.sol\\\";\\nimport \\\"./interfaces/IWrappedNative.sol\\\";\\nimport \\\"./interfaces/StakingRewardsInterface.sol\\\";\\nimport \\\"./interfaces/StakingRewardsFactoryInterface.sol\\\";\\n\\ncontract StakingRewardsHelper is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    StakingRewardsFactoryInterface public immutable factory;\\n    address public immutable wrappedNative;\\n\\n    /**\\n     * @notice Emitted when tokens are seized\\n     */\\n    event TokenSeized(address token, uint256 amount);\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address _factory, address _wrappedNative) {\\n        factory = StakingRewardsFactoryInterface(_factory);\\n        wrappedNative = _wrappedNative;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    struct RewardTokenInfo {\\n        address rewardTokenAddress;\\n        string rewardTokenSymbol;\\n        uint8 rewardTokenDecimals;\\n    }\\n\\n    struct RewardClaimable {\\n        RewardTokenInfo rewardToken;\\n        uint256 amount;\\n    }\\n\\n    struct UserStaked {\\n        address stakingTokenAddress;\\n        uint256 balance;\\n    }\\n\\n    struct StakingInfo {\\n        address stakingTokenAddress;\\n        uint256 totalSupply;\\n        uint256 supplyRatePerBlock;\\n        uint256 exchangeRate;\\n        RewardRate[] rewardRates;\\n    }\\n\\n    struct RewardRate {\\n        address rewardTokenAddress;\\n        uint256 rate;\\n    }\\n\\n    /**\\n     * @notice Getthe reward token info\\n     * @param rewardToken The reward token\\n     * @return The reward token info\\n     */\\n    function getRewardTokenInfo(address rewardToken)\\n        public\\n        view\\n        returns (RewardTokenInfo memory)\\n    {\\n        return\\n            RewardTokenInfo({\\n                rewardTokenAddress: rewardToken,\\n                rewardTokenSymbol: IERC20Metadata(rewardToken).symbol(),\\n                rewardTokenDecimals: IERC20Metadata(rewardToken).decimals()\\n            });\\n    }\\n\\n    /**\\n     * @notice Get user claimable rewards\\n     * @param account The account\\n     * @param rewardTokens The list of reward tokens\\n     * @return The list of user claimable rewards\\n     */\\n    function getUserClaimableRewards(\\n        address account,\\n        address[] calldata rewardTokens\\n    ) public view returns (RewardClaimable[] memory) {\\n        RewardClaimable[] memory rewardsClaimable = new RewardClaimable[](\\n            rewardTokens.length\\n        );\\n\\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            uint256 amount;\\n            for (uint256 j = 0; j < allStakingRewards.length; j++) {\\n                address stakingRewards = allStakingRewards[j];\\n                amount += StakingRewardsInterface(stakingRewards).earned(\\n                    rewardTokens[i],\\n                    account\\n                );\\n            }\\n\\n            rewardsClaimable[i] = RewardClaimable({\\n                rewardToken: getRewardTokenInfo(rewardTokens[i]),\\n                amount: amount\\n            });\\n        }\\n        return rewardsClaimable;\\n    }\\n\\n    /**\\n     * @notice Get user staked info\\n     * @param account The account\\n     * @return The list of user staked info\\n     */\\n    function getUserStaked(address account)\\n        public\\n        view\\n        returns (UserStaked[] memory)\\n    {\\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\\n        UserStaked[] memory stakedInfo = new UserStaked[](\\n            allStakingRewards.length\\n        );\\n        for (uint256 i = 0; i < allStakingRewards.length; i++) {\\n            address stakingRewards = allStakingRewards[i];\\n            address stakingToken = StakingRewardsInterface(stakingRewards)\\n                .getStakingToken();\\n            uint256 balance = StakingRewardsInterface(stakingRewards).balanceOf(\\n                account\\n            );\\n            stakedInfo[i] = UserStaked({\\n                stakingTokenAddress: stakingToken,\\n                balance: balance\\n            });\\n        }\\n        return stakedInfo;\\n    }\\n\\n    /**\\n     * @notice Get all the staking info\\n     * @return The list of staking info\\n     */\\n    function getStakingInfo() public view returns (StakingInfo[] memory) {\\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\\n        StakingInfo[] memory stakingRewardRates = new StakingInfo[](\\n            allStakingRewards.length\\n        );\\n        for (uint256 i = 0; i < allStakingRewards.length; i++) {\\n            address stakingRewards = allStakingRewards[i];\\n            address[] memory allRewardTokens = StakingRewardsInterface(\\n                stakingRewards\\n            ).getAllRewardsTokens();\\n\\n            RewardRate[] memory rewardRates = new RewardRate[](\\n                allRewardTokens.length\\n            );\\n            for (uint256 j = 0; j < allRewardTokens.length; j++) {\\n                address rewardToken = allRewardTokens[j];\\n                uint256 rate = StakingRewardsInterface(stakingRewards)\\n                    .getRewardRate(rewardToken);\\n                rewardRates[j] = RewardRate({\\n                    rewardTokenAddress: rewardToken,\\n                    rate: rate\\n                });\\n            }\\n\\n            address stakingToken = StakingRewardsInterface(stakingRewards)\\n                .getStakingToken();\\n            uint256 totalSupply = StakingRewardsInterface(stakingRewards)\\n                .totalSupply();\\n            uint256 supplyRatePerBlock = ITokenInterface(stakingToken)\\n                .supplyRatePerBlock();\\n            uint256 exchangeRate = ITokenInterface(stakingToken)\\n                .exchangeRateStored();\\n            stakingRewardRates[i] = StakingInfo({\\n                stakingTokenAddress: stakingToken,\\n                totalSupply: totalSupply,\\n                supplyRatePerBlock: supplyRatePerBlock,\\n                exchangeRate: exchangeRate,\\n                rewardRates: rewardRates\\n            });\\n        }\\n        return stakingRewardRates;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Mint and stake tokens into staking rewards\\n     * @param underlying The underlying token\\n     * @param amount The amount\\n     */\\n    function stake(address underlying, uint256 amount) public nonReentrant {\\n        require(amount > 0, \\\"invalid amount\\\");\\n        address stakingToken = factory.getStakingToken(underlying);\\n        require(stakingToken != address(0), \\\"invalid staking token\\\");\\n        address stakingRewards = factory.getStakingRewards(stakingToken);\\n        require(stakingRewards != address(0), \\\"staking rewards not exist\\\");\\n\\n        // Get funds from user.\\n        IERC20(underlying).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Mint.\\n        IERC20(underlying).approve(stakingToken, amount);\\n        require(ITokenInterface(stakingToken).mint(amount) == 0, \\\"mint failed\\\");\\n\\n        // Stake to staking rewards.\\n        uint256 balance = IERC20(stakingToken).balanceOf(address(this));\\n        IERC20(stakingToken).approve(stakingRewards, balance);\\n        StakingRewardsInterface(stakingRewards).stakeFor(msg.sender, balance);\\n\\n        assert(IERC20(stakingToken).balanceOf(address(this)) == 0);\\n    }\\n\\n    /**\\n     * @notice Mint native and stake tokens into staking rewards\\n     */\\n    function stakeNative() public payable nonReentrant {\\n        require(msg.value > 0, \\\"invalid amount\\\");\\n        address stakingToken = factory.getStakingToken(wrappedNative);\\n        require(stakingToken != address(0), \\\"invalid staking token\\\");\\n        address stakingRewards = factory.getStakingRewards(stakingToken);\\n        require(stakingRewards != address(0), \\\"staking rewards not exist\\\");\\n\\n        // Mint native.\\n        require(\\n            ITokenInterface(stakingToken).mintNative{value: msg.value}() == 0,\\n            \\\"mint native failed\\\"\\n        );\\n\\n        // Stake to staking rewards.\\n        uint256 balance = IERC20(stakingToken).balanceOf(address(this));\\n        IERC20(stakingToken).approve(stakingRewards, balance);\\n        StakingRewardsInterface(stakingRewards).stakeFor(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @notice Unstake tokens from staking rewards and redeem\\n     * @param stakingRewards The staking rewards\\n     * @param amount The amount\\n     * @param toNative Unwrap to native token or not\\n     */\\n    function unstake(\\n        address stakingRewards,\\n        uint256 amount,\\n        bool toNative\\n    ) public nonReentrant {\\n        require(amount > 0, \\\"invalid amount\\\");\\n        address stakingToken = StakingRewardsInterface(stakingRewards)\\n            .getStakingToken();\\n        require(stakingToken != address(0), \\\"invalid staking token\\\");\\n        address underlying = ITokenInterface(stakingToken).underlying();\\n        require(underlying != address(0), \\\"invalid underlying\\\");\\n\\n        // Withdraw from staking rewards.\\n        StakingRewardsInterface(stakingRewards).withdrawFor(msg.sender, amount);\\n\\n        if (toNative && underlying == wrappedNative) {\\n            // Redeem native.\\n            require(\\n                ITokenInterface(stakingToken).redeemNative(amount) == 0,\\n                \\\"redeem native failed\\\"\\n            );\\n\\n            // Send ethers to user.\\n            (bool sent, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n            assert(sent);\\n            assert(address(this).balance == 0);\\n        } else {\\n            // Redeem.\\n            require(\\n                ITokenInterface(stakingToken).redeem(amount) == 0,\\n                \\\"redeem failed\\\"\\n            );\\n\\n            // Send funds to user.\\n            uint256 balance = IERC20(underlying).balanceOf(address(this));\\n            IERC20(underlying).safeTransfer(msg.sender, balance);\\n            assert(IERC20(underlying).balanceOf(address(this)) == 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit all staking rewards\\n     * @param toNative Unwrap to native token or not\\n     */\\n    function exitAll(bool toNative) public {\\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\\n        exit(allStakingRewards, toNative);\\n    }\\n\\n    /**\\n     * @notice Exit staking rewards\\n     * @param stakingRewards The list of staking rewards\\n     * @param toNative Unwrap to native token or not\\n     */\\n    function exit(address[] memory stakingRewards, bool toNative) public {\\n        for (uint256 i = 0; i < stakingRewards.length; i++) {\\n            uint256 balance = StakingRewardsInterface(stakingRewards[i])\\n                .balanceOf(msg.sender);\\n            if (balance > 0) {\\n                unstake(stakingRewards[i], balance, toNative);\\n                StakingRewardsInterface(stakingRewards[i]).getRewardFor(\\n                    msg.sender\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim all rewards\\n     */\\n    function claimAllRewards() public {\\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\\n        claimRewards(allStakingRewards);\\n    }\\n\\n    /**\\n     * @notice Claim rewards by given staking rewards\\n     * @param stakingRewards The list of staking rewards\\n     */\\n    function claimRewards(address[] memory stakingRewards) public nonReentrant {\\n        for (uint256 i = 0; i < stakingRewards.length; i++) {\\n            StakingRewardsInterface(stakingRewards[i]).getRewardFor(msg.sender);\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Seize tokens in this contract.\\n     * @param token The token\\n     * @param amount The amount\\n     */\\n    function seize(address token, uint256 amount) external onlyOwner {\\n        if (token == address(0)) {\\n            (bool sent, ) = owner().call{value: address(this).balance}(\\\"\\\");\\n            assert(sent);\\n        } else {\\n            IERC20(token).safeTransfer(owner(), amount);\\n        }\\n        emit TokenSeized(token, amount);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd70fd9c1ee41ccf5019a005bc73bac28cf43e0e12e32bb32fc98cd3295d381de\",\"license\":\"MIT\"},\"contracts/staking-rewards/interfaces/ITokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITokenInterface {\\n    function underlying() external view returns (address);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function mintNative() external payable returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemNative(uint256 redeemTokens) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb530ccb83a3d8e04374c87efcf9a725e3b7e50254f0e5b806afbd58c9ae2b74b\",\"license\":\"MIT\"},\"contracts/staking-rewards/interfaces/IWrappedNative.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWrappedNative {\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n}\\n\",\"keccak256\":\"0x0685f8a3cd1af90038bfd7412b43e4bff96a6a1f9c2796e2a92dc9ca72af540c\",\"license\":\"MIT\"},\"contracts/staking-rewards/interfaces/StakingRewardsFactoryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface StakingRewardsFactoryInterface {\\n    function getStakingRewardsCount() external view returns (uint256);\\n\\n    function getAllStakingRewards() external view returns (address[] memory);\\n\\n    function getStakingRewards(address stakingToken)\\n        external\\n        view\\n        returns (address);\\n\\n    function getStakingToken(address underlying)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0xd01e0be83f8f137f52637e76f86f867bd39aa085a5f85464032af5d05db32016\",\"license\":\"MIT\"},\"contracts/staking-rewards/interfaces/StakingRewardsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface StakingRewardsInterface {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function lastTimeRewardApplicable(address _rewardsToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function rewardPerToken(address _rewardsToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function earned(address _rewardsToken, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRewardRate(address _rewardsToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRewardForDuration(address _rewardsToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRewardsTokenCount() external view returns (uint256);\\n\\n    function getAllRewardsTokens() external view returns (address[] memory);\\n\\n    function getStakingToken() external view returns (address);\\n\\n    function stake(uint256 amount) external;\\n\\n    function stakeFor(address account, uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function withdrawFor(address account, uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function getRewardFor(address account) external;\\n\\n    function exit() external;\\n}\\n\",\"keccak256\":\"0x8ebf44c9f2171c5ec810b1fb3e26199255884e7afea83640b2805cdcdad58fc3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002e2438038062002e248339810160408190526200003491620000c8565b6200003f336200005b565b600180556001600160a01b039182166080521660a05262000100565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000c357600080fd5b919050565b60008060408385031215620000dc57600080fd5b620000e783620000ab565b9150620000f760208401620000ab565b90509250929050565b60805160a051612cb162000173600039600081816102e8015281816105f5015261095001526000818161021a0152818161036e0152818161097b01528181610a3101528181610d8201528181610e38015281816113080152818161188301528181611bd80152611e1f0152612cb16000f3fe6080604052600436106101025760003560e01c8063c45a015511610095578063e8bb4d6d11610064578063e8bb4d6d146102b6578063eb6d3a11146102d6578063eb9253c01461030a578063f2fde38b1461032a578063f9f031df1461034a57600080fd5b8063c45a015514610208578063d3e64cab1461023c578063d877d5c414610269578063dac3fc3f1461028957600080fd5b80638da5cb5b116100d15780638da5cb5b14610162578063adc9772e14610199578063b2989f5d146101b9578063b40cd21d146101e657600080fd5b80630b83a7271461010e57806321d0af3414610125578063590fcdda14610145578063715018a61461014d57600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012361036a565b005b34801561013157600080fd5b50610123610140366004612485565b610400565b6101236108f4565b34801561015957600080fd5b50610123610ce5565b34801561016e57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101a557600080fd5b506101236101b43660046124c7565b610d1b565b3480156101c557600080fd5b506101d96101d43660046124f3565b6111e0565b60405161019091906125a6565b3480156101f257600080fd5b506101fb611302565b60405161019091906125b9565b34801561021457600080fd5b5061017c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561024857600080fd5b5061025c61025736600461269a565b611805565b6040516101909190612722565b34801561027557600080fd5b50610123610284366004612877565b611a82565b34801561029557600080fd5b506102a96102a43660046124f3565b611bd2565b60405161019091906128c9565b3480156102c257600080fd5b506101236102d1366004612929565b611e1b565b3480156102e257600080fd5b5061017c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561031657600080fd5b506101236103253660046124c7565b611eb3565b34801561033657600080fd5b506101236103453660046124f3565b611fc0565b34801561035657600080fd5b50610123610365366004612946565b612058565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103f2919081019061297b565b90506103fd81612058565b50565b6002600154141561042c5760405162461bcd60e51b815260040161042390612a0a565b60405180910390fd5b60026001558161044e5760405162461bcd60e51b815260040161042390612a41565b6000836001600160a01b0316639f9106d16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b29190612a69565b90506001600160a01b0381166104da5760405162461bcd60e51b815260040161042390612a86565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190612a69565b90506001600160a01b03811661058b5760405162461bcd60e51b8152602060048201526012602482015271696e76616c696420756e6465726c79696e6760701b6044820152606401610423565b604051636da8c6d960e11b8152336004820152602481018590526001600160a01b0386169063db518db290604401600060405180830381600087803b1580156105d357600080fd5b505af11580156105e7573d6000803e3d6000fd5b5050505082801561062957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316145b1561074957604051634bf03edf60e01b8152600481018590526001600160a01b03831690634bf03edf906024016020604051808303816000875af1158015610675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106999190612ab5565b156106dd5760405162461bcd60e51b81526020600482015260146024820152731c995919595b481b985d1a5d994819985a5b195960621b6044820152606401610423565b604051600090339047908381818185875af1925050503d806000811461071f576040519150601f19603f3d011682016040523d82523d6000602084013e610724565b606091505b505090508061073557610735612ace565b471561074357610743612ace565b506108e9565b60405163db006a7560e01b8152600481018590526001600160a01b0383169063db006a75906024016020604051808303816000875af1158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b49190612ab5565b156107f15760405162461bcd60e51b815260206004820152600d60248201526c1c995919595b4819985a5b1959609a1b6044820152606401610423565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c9190612ab5565b90506108726001600160a01b038316338361211e565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156108b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108da9190612ab5565b156108e7576108e7612ace565b505b505060018055505050565b600260015414156109175760405162461bcd60e51b815260040161042390612a0a565b6002600155346109395760405162461bcd60e51b815260040161042390612a41565b604051630a69c70f60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906329a71c3c90602401602060405180830381865afa1580156109c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e89190612a69565b90506001600160a01b038116610a105760405162461bcd60e51b815260040161042390612a86565b6040516210f7f160e91b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906321efe20090602401602060405180830381865afa158015610a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9e9190612a69565b90506001600160a01b038116610af25760405162461bcd60e51b81526020600482015260196024820152781cdd185ada5b99c81c995dd85c991cc81b9bdd08195e1a5cdd603a1b6044820152606401610423565b816001600160a01b031663219f2fe7346040518263ffffffff1660e01b815260040160206040518083038185885af1158015610b32573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b579190612ab5565b15610b995760405162461bcd60e51b81526020600482015260126024820152711b5a5b9d081b985d1a5d994819985a5b195960721b6044820152606401610423565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190612ab5565b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018390529192509084169063095ea7b3906044016020604051808303816000875af1158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b9190612ae4565b506040516305dc812160e31b8152336004820152602481018290526001600160a01b03831690632ee4090890604401600060405180830381600087803b158015610cc457600080fd5b505af1158015610cd8573d6000803e3d6000fd5b5050600180555050505050565b6000546001600160a01b03163314610d0f5760405162461bcd60e51b815260040161042390612b01565b610d196000612181565b565b60026001541415610d3e5760405162461bcd60e51b815260040161042390612a0a565b600260015580610d605760405162461bcd60e51b815260040161042390612a41565b604051630a69c70f60e21b81526001600160a01b0383811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906329a71c3c90602401602060405180830381865afa158015610dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610def9190612a69565b90506001600160a01b038116610e175760405162461bcd60e51b815260040161042390612a86565b6040516210f7f160e91b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906321efe20090602401602060405180830381865afa158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190612a69565b90506001600160a01b038116610ef95760405162461bcd60e51b81526020600482015260196024820152781cdd185ada5b99c81c995dd85c991cc81b9bdd08195e1a5cdd603a1b6044820152606401610423565b610f0e6001600160a01b0385163330866121d1565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820185905285169063095ea7b3906044016020604051808303816000875af1158015610f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f819190612ae4565b5060405163140e25ad60e31b8152600481018490526001600160a01b0383169063a0712d68906024016020604051808303816000875af1158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed9190612ab5565b156110285760405162461bcd60e51b815260206004820152600b60248201526a1b5a5b9d0819985a5b195960aa1b6044820152606401610423565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561106f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110939190612ab5565b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018390529192509084169063095ea7b3906044016020604051808303816000875af11580156110e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110a9190612ae4565b506040516305dc812160e31b8152336004820152602481018290526001600160a01b03831690632ee4090890604401600060405180830381600087803b15801561115357600080fd5b505af1158015611167573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526001600160a01b03861692506370a082319150602401602060405180830381865afa1580156111af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d39190612ab5565b156108e9576108e9612ace565b611210604051806060016040528060006001600160a01b0316815260200160608152602001600060ff1681525090565b6040518060600160405280836001600160a01b03168152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611268573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112909190810190612b36565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f79190612bca565b60ff16905292915050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611364573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261138c919081019061297b565b90506000815167ffffffffffffffff8111156113aa576113aa612798565b60405190808252806020026020018201604052801561141657816020015b6114036040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b8152602001906001900390816113c85790505b50905060005b82518110156117fe57600083828151811061143957611439612bed565b602002602001015190506000816001600160a01b0316638040c65b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611483573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114ab919081019061297b565b90506000815167ffffffffffffffff8111156114c9576114c9612798565b60405190808252806020026020018201604052801561150e57816020015b60408051808201909152600080825260208201528152602001906001900390816114e75790505b50905060005b82518110156115fe57600083828151811061153157611531612bed565b602090810291909101015160405163ea7cbff160e01b81526001600160a01b03808316600483015291925060009187169063ea7cbff190602401602060405180830381865afa158015611588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ac9190612ab5565b90506040518060400160405280836001600160a01b03168152602001828152508484815181106115de576115de612bed565b6020026020010181905250505080806115f690612c19565b915050611514565b506000836001600160a01b0316639f9106d16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561163f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116639190612a69565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c99190612ab5565b90506000826001600160a01b031663ae9d70b06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f9190612ab5565b90506000836001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117959190612ab5565b90506040518060a00160405280856001600160a01b03168152602001848152602001838152602001828152602001868152508989815181106117d9576117d9612bed565b60200260200101819052505050505050505080806117f690612c19565b91505061141c565b5092915050565b606060008267ffffffffffffffff81111561182257611822612798565b60405190808252806020026020018201604052801561187c57816020015b6040805160a081018252600091810182815260608083015260808201839052815260208101919091528152602001906001900390816118405790505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156118df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611907919081019061297b565b905060005b84811015611a75576000805b8351811015611a0557600084828151811061193557611935612bed565b60200260200101519050806001600160a01b031663211dc32d8a8a8781811061196057611960612bed565b905060200201602081019061197591906124f3565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908d166024820152604401602060405180830381865afa1580156119c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e59190612ab5565b6119ef9084612c34565b92505080806119fd90612c19565b915050611918565b506040518060400160405280611a3b898986818110611a2657611a26612bed565b90506020020160208101906101d491906124f3565b815260200182815250848381518110611a5657611a56612bed565b6020026020010181905250508080611a6d90612c19565b91505061190c565b50909150505b9392505050565b60005b8251811015611bcd576000838281518110611aa257611aa2612bed565b60209081029190910101516040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b169190612ab5565b90508015611bba57611b42848381518110611b3357611b33612bed565b60200260200101518285610400565b838281518110611b5457611b54612bed565b602090810291909101015160405163055de27560e01b81523360048201526001600160a01b039091169063055de27590602401600060405180830381600087803b158015611ba157600080fd5b505af1158015611bb5573d6000803e3d6000fd5b505050505b5080611bc581612c19565b915050611a85565b505050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611c34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c5c919081019061297b565b90506000815167ffffffffffffffff811115611c7a57611c7a612798565b604051908082528060200260200182016040528015611cbf57816020015b6040805180820190915260008082526020820152815260200190600190039081611c985790505b50905060005b8251811015611e13576000838281518110611ce257611ce2612bed565b602002602001015190506000816001600160a01b0316639f9106d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d509190612a69565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918416906370a0823190602401602060405180830381865afa158015611d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc09190612ab5565b90506040518060400160405280836001600160a01b0316815260200182815250858581518110611df257611df2612bed565b60200260200101819052505050508080611e0b90612c19565b915050611cc5565b509392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611e7b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ea3919081019061297b565b9050611eaf8183611a82565b5050565b6000546001600160a01b03163314611edd5760405162461bcd60e51b815260040161042390612b01565b6001600160a01b038216611f5457600080546040516001600160a01b039091169047908381818185875af1925050503d8060008114611f38576040519150601f19603f3d011682016040523d82523d6000602084013e611f3d565b606091505b5050905080611f4e57611f4e612ace565b50611f7a565b611f7a611f696000546001600160a01b031690565b6001600160a01b038416908361211e565b604080516001600160a01b0384168152602081018390527fb930d7c3c6896f70ea10a959f1d9a7c04e0467138efa4c7040570d4b8f4894b6910160405180910390a15050565b6000546001600160a01b03163314611fea5760405162461bcd60e51b815260040161042390612b01565b6001600160a01b03811661204f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610423565b6103fd81612181565b6002600154141561207b5760405162461bcd60e51b815260040161042390612a0a565b600260015560005b81518110156121165781818151811061209e5761209e612bed565b602090810291909101015160405163055de27560e01b81523360048201526001600160a01b039091169063055de27590602401600060405180830381600087803b1580156120eb57600080fd5b505af11580156120ff573d6000803e3d6000fd5b50505050808061210e90612c19565b915050612083565b505060018055565b6040516001600160a01b038316602482015260448101829052611bcd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261220f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526122099085906323b872dd60e01b9060840161214a565b50505050565b6000612264826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122e19092919063ffffffff16565b805190915015611bcd57808060200190518101906122829190612ae4565b611bcd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610423565b60606122f084846000856122f8565b949350505050565b6060824710156123595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610423565b6001600160a01b0385163b6123b05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610423565b600080866001600160a01b031685876040516123cc9190612c4c565b60006040518083038185875af1925050503d8060008114612409576040519150601f19603f3d011682016040523d82523d6000602084013e61240e565b606091505b509150915061241e828286612429565b979650505050505050565b60608315612438575081611a7b565b8251156124485782518084602001fd5b8160405162461bcd60e51b81526004016104239190612c68565b6001600160a01b03811681146103fd57600080fd5b80151581146103fd57600080fd5b60008060006060848603121561249a57600080fd5b83356124a581612462565b92506020840135915060408401356124bc81612477565b809150509250925092565b600080604083850312156124da57600080fd5b82356124e581612462565b946020939093013593505050565b60006020828403121561250557600080fd5b8135611a7b81612462565b60005b8381101561252b578181015183820152602001612513565b838111156122095750506000910152565b60008151808452612554816020860160208601612510565b601f01601f19169290920160200192915050565b60018060a01b038151168252600060208201516060602085015261258f606085018261253c565b60409384015160ff16949093019390935250919050565b602081526000611a7b6020830184612568565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561268b57898403603f19018652825180516001600160a01b03168552888101518986015287810151888601526060808201519086015260809081015160a0918601829052805191860182905289019060c086019084905b808210156126765761266283855180516001600160a01b03168252602090810151910152565b928b0192918a01916001919091019061263c565b505096890196945050918701916001016125e1565b50919998505050505050505050565b6000806000604084860312156126af57600080fd5b83356126ba81612462565b9250602084013567ffffffffffffffff808211156126d757600080fd5b818601915086601f8301126126eb57600080fd5b8135818111156126fa57600080fd5b8760208260051b850101111561270f57600080fd5b6020830194508093505050509250925092565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561278a57888303603f190185528151805187855261276d88860182612568565b918901519489019490945294870194925090860190600101612749565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156127d7576127d7612798565b604052919050565b600067ffffffffffffffff8211156127f9576127f9612798565b5060051b60200190565b600082601f83011261281457600080fd5b81356020612829612824836127df565b6127ae565b82815260059290921b8401810191818101908684111561284857600080fd5b8286015b8481101561286c57803561285f81612462565b835291830191830161284c565b509695505050505050565b6000806040838503121561288a57600080fd5b823567ffffffffffffffff8111156128a157600080fd5b6128ad85828601612803565b92505060208301356128be81612477565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561291c5761290c84835180516001600160a01b03168252602090810151910152565b92840192908501906001016128e6565b5091979650505050505050565b60006020828403121561293b57600080fd5b8135611a7b81612477565b60006020828403121561295857600080fd5b813567ffffffffffffffff81111561296f57600080fd5b6122f084828501612803565b6000602080838503121561298e57600080fd5b825167ffffffffffffffff8111156129a557600080fd5b8301601f810185136129b657600080fd5b80516129c4612824826127df565b81815260059190911b820183019083810190878311156129e357600080fd5b928401925b8284101561241e5783516129fb81612462565b825292840192908401906129e8565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600e908201526d1a5b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b600060208284031215612a7b57600080fd5b8151611a7b81612462565b60208082526015908201527434b73b30b634b21039ba30b5b4b733903a37b5b2b760591b604082015260600190565b600060208284031215612ac757600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b600060208284031215612af657600080fd5b8151611a7b81612477565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215612b4857600080fd5b815167ffffffffffffffff80821115612b6057600080fd5b818401915084601f830112612b7457600080fd5b815181811115612b8657612b86612798565b612b99601f8201601f19166020016127ae565b9150808252856020828501011115612bb057600080fd5b612bc1816020840160208601612510565b50949350505050565b600060208284031215612bdc57600080fd5b815160ff81168114611a7b57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612c2d57612c2d612c03565b5060010190565b60008219821115612c4757612c47612c03565b500190565b60008251612c5e818460208701612510565b9190910192915050565b602081526000611a7b602083018461253c56fea26469706673582212207b3750ecd64cbc1cad81fa3cb1f69fcbc4569c71388fe23edf4c96886ff2d46464736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c8063c45a015511610095578063e8bb4d6d11610064578063e8bb4d6d146102b6578063eb6d3a11146102d6578063eb9253c01461030a578063f2fde38b1461032a578063f9f031df1461034a57600080fd5b8063c45a015514610208578063d3e64cab1461023c578063d877d5c414610269578063dac3fc3f1461028957600080fd5b80638da5cb5b116100d15780638da5cb5b14610162578063adc9772e14610199578063b2989f5d146101b9578063b40cd21d146101e657600080fd5b80630b83a7271461010e57806321d0af3414610125578063590fcdda14610145578063715018a61461014d57600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012361036a565b005b34801561013157600080fd5b50610123610140366004612485565b610400565b6101236108f4565b34801561015957600080fd5b50610123610ce5565b34801561016e57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101a557600080fd5b506101236101b43660046124c7565b610d1b565b3480156101c557600080fd5b506101d96101d43660046124f3565b6111e0565b60405161019091906125a6565b3480156101f257600080fd5b506101fb611302565b60405161019091906125b9565b34801561021457600080fd5b5061017c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561024857600080fd5b5061025c61025736600461269a565b611805565b6040516101909190612722565b34801561027557600080fd5b50610123610284366004612877565b611a82565b34801561029557600080fd5b506102a96102a43660046124f3565b611bd2565b60405161019091906128c9565b3480156102c257600080fd5b506101236102d1366004612929565b611e1b565b3480156102e257600080fd5b5061017c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561031657600080fd5b506101236103253660046124c7565b611eb3565b34801561033657600080fd5b506101236103453660046124f3565b611fc0565b34801561035657600080fd5b50610123610365366004612946565b612058565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103f2919081019061297b565b90506103fd81612058565b50565b6002600154141561042c5760405162461bcd60e51b815260040161042390612a0a565b60405180910390fd5b60026001558161044e5760405162461bcd60e51b815260040161042390612a41565b6000836001600160a01b0316639f9106d16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b29190612a69565b90506001600160a01b0381166104da5760405162461bcd60e51b815260040161042390612a86565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190612a69565b90506001600160a01b03811661058b5760405162461bcd60e51b8152602060048201526012602482015271696e76616c696420756e6465726c79696e6760701b6044820152606401610423565b604051636da8c6d960e11b8152336004820152602481018590526001600160a01b0386169063db518db290604401600060405180830381600087803b1580156105d357600080fd5b505af11580156105e7573d6000803e3d6000fd5b5050505082801561062957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316145b1561074957604051634bf03edf60e01b8152600481018590526001600160a01b03831690634bf03edf906024016020604051808303816000875af1158015610675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106999190612ab5565b156106dd5760405162461bcd60e51b81526020600482015260146024820152731c995919595b481b985d1a5d994819985a5b195960621b6044820152606401610423565b604051600090339047908381818185875af1925050503d806000811461071f576040519150601f19603f3d011682016040523d82523d6000602084013e610724565b606091505b505090508061073557610735612ace565b471561074357610743612ace565b506108e9565b60405163db006a7560e01b8152600481018590526001600160a01b0383169063db006a75906024016020604051808303816000875af1158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b49190612ab5565b156107f15760405162461bcd60e51b815260206004820152600d60248201526c1c995919595b4819985a5b1959609a1b6044820152606401610423565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c9190612ab5565b90506108726001600160a01b038316338361211e565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156108b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108da9190612ab5565b156108e7576108e7612ace565b505b505060018055505050565b600260015414156109175760405162461bcd60e51b815260040161042390612a0a565b6002600155346109395760405162461bcd60e51b815260040161042390612a41565b604051630a69c70f60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906329a71c3c90602401602060405180830381865afa1580156109c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e89190612a69565b90506001600160a01b038116610a105760405162461bcd60e51b815260040161042390612a86565b6040516210f7f160e91b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906321efe20090602401602060405180830381865afa158015610a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9e9190612a69565b90506001600160a01b038116610af25760405162461bcd60e51b81526020600482015260196024820152781cdd185ada5b99c81c995dd85c991cc81b9bdd08195e1a5cdd603a1b6044820152606401610423565b816001600160a01b031663219f2fe7346040518263ffffffff1660e01b815260040160206040518083038185885af1158015610b32573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b579190612ab5565b15610b995760405162461bcd60e51b81526020600482015260126024820152711b5a5b9d081b985d1a5d994819985a5b195960721b6044820152606401610423565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190612ab5565b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018390529192509084169063095ea7b3906044016020604051808303816000875af1158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b9190612ae4565b506040516305dc812160e31b8152336004820152602481018290526001600160a01b03831690632ee4090890604401600060405180830381600087803b158015610cc457600080fd5b505af1158015610cd8573d6000803e3d6000fd5b5050600180555050505050565b6000546001600160a01b03163314610d0f5760405162461bcd60e51b815260040161042390612b01565b610d196000612181565b565b60026001541415610d3e5760405162461bcd60e51b815260040161042390612a0a565b600260015580610d605760405162461bcd60e51b815260040161042390612a41565b604051630a69c70f60e21b81526001600160a01b0383811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906329a71c3c90602401602060405180830381865afa158015610dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610def9190612a69565b90506001600160a01b038116610e175760405162461bcd60e51b815260040161042390612a86565b6040516210f7f160e91b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906321efe20090602401602060405180830381865afa158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190612a69565b90506001600160a01b038116610ef95760405162461bcd60e51b81526020600482015260196024820152781cdd185ada5b99c81c995dd85c991cc81b9bdd08195e1a5cdd603a1b6044820152606401610423565b610f0e6001600160a01b0385163330866121d1565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820185905285169063095ea7b3906044016020604051808303816000875af1158015610f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f819190612ae4565b5060405163140e25ad60e31b8152600481018490526001600160a01b0383169063a0712d68906024016020604051808303816000875af1158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed9190612ab5565b156110285760405162461bcd60e51b815260206004820152600b60248201526a1b5a5b9d0819985a5b195960aa1b6044820152606401610423565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561106f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110939190612ab5565b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018390529192509084169063095ea7b3906044016020604051808303816000875af11580156110e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110a9190612ae4565b506040516305dc812160e31b8152336004820152602481018290526001600160a01b03831690632ee4090890604401600060405180830381600087803b15801561115357600080fd5b505af1158015611167573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526001600160a01b03861692506370a082319150602401602060405180830381865afa1580156111af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d39190612ab5565b156108e9576108e9612ace565b611210604051806060016040528060006001600160a01b0316815260200160608152602001600060ff1681525090565b6040518060600160405280836001600160a01b03168152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611268573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112909190810190612b36565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f79190612bca565b60ff16905292915050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611364573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261138c919081019061297b565b90506000815167ffffffffffffffff8111156113aa576113aa612798565b60405190808252806020026020018201604052801561141657816020015b6114036040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b8152602001906001900390816113c85790505b50905060005b82518110156117fe57600083828151811061143957611439612bed565b602002602001015190506000816001600160a01b0316638040c65b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611483573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114ab919081019061297b565b90506000815167ffffffffffffffff8111156114c9576114c9612798565b60405190808252806020026020018201604052801561150e57816020015b60408051808201909152600080825260208201528152602001906001900390816114e75790505b50905060005b82518110156115fe57600083828151811061153157611531612bed565b602090810291909101015160405163ea7cbff160e01b81526001600160a01b03808316600483015291925060009187169063ea7cbff190602401602060405180830381865afa158015611588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ac9190612ab5565b90506040518060400160405280836001600160a01b03168152602001828152508484815181106115de576115de612bed565b6020026020010181905250505080806115f690612c19565b915050611514565b506000836001600160a01b0316639f9106d16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561163f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116639190612a69565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c99190612ab5565b90506000826001600160a01b031663ae9d70b06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f9190612ab5565b90506000836001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117959190612ab5565b90506040518060a00160405280856001600160a01b03168152602001848152602001838152602001828152602001868152508989815181106117d9576117d9612bed565b60200260200101819052505050505050505080806117f690612c19565b91505061141c565b5092915050565b606060008267ffffffffffffffff81111561182257611822612798565b60405190808252806020026020018201604052801561187c57816020015b6040805160a081018252600091810182815260608083015260808201839052815260208101919091528152602001906001900390816118405790505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156118df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611907919081019061297b565b905060005b84811015611a75576000805b8351811015611a0557600084828151811061193557611935612bed565b60200260200101519050806001600160a01b031663211dc32d8a8a8781811061196057611960612bed565b905060200201602081019061197591906124f3565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908d166024820152604401602060405180830381865afa1580156119c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e59190612ab5565b6119ef9084612c34565b92505080806119fd90612c19565b915050611918565b506040518060400160405280611a3b898986818110611a2657611a26612bed565b90506020020160208101906101d491906124f3565b815260200182815250848381518110611a5657611a56612bed565b6020026020010181905250508080611a6d90612c19565b91505061190c565b50909150505b9392505050565b60005b8251811015611bcd576000838281518110611aa257611aa2612bed565b60209081029190910101516040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b169190612ab5565b90508015611bba57611b42848381518110611b3357611b33612bed565b60200260200101518285610400565b838281518110611b5457611b54612bed565b602090810291909101015160405163055de27560e01b81523360048201526001600160a01b039091169063055de27590602401600060405180830381600087803b158015611ba157600080fd5b505af1158015611bb5573d6000803e3d6000fd5b505050505b5080611bc581612c19565b915050611a85565b505050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611c34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c5c919081019061297b565b90506000815167ffffffffffffffff811115611c7a57611c7a612798565b604051908082528060200260200182016040528015611cbf57816020015b6040805180820190915260008082526020820152815260200190600190039081611c985790505b50905060005b8251811015611e13576000838281518110611ce257611ce2612bed565b602002602001015190506000816001600160a01b0316639f9106d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d509190612a69565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918416906370a0823190602401602060405180830381865afa158015611d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc09190612ab5565b90506040518060400160405280836001600160a01b0316815260200182815250858581518110611df257611df2612bed565b60200260200101819052505050508080611e0b90612c19565b915050611cc5565b509392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611e7b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ea3919081019061297b565b9050611eaf8183611a82565b5050565b6000546001600160a01b03163314611edd5760405162461bcd60e51b815260040161042390612b01565b6001600160a01b038216611f5457600080546040516001600160a01b039091169047908381818185875af1925050503d8060008114611f38576040519150601f19603f3d011682016040523d82523d6000602084013e611f3d565b606091505b5050905080611f4e57611f4e612ace565b50611f7a565b611f7a611f696000546001600160a01b031690565b6001600160a01b038416908361211e565b604080516001600160a01b0384168152602081018390527fb930d7c3c6896f70ea10a959f1d9a7c04e0467138efa4c7040570d4b8f4894b6910160405180910390a15050565b6000546001600160a01b03163314611fea5760405162461bcd60e51b815260040161042390612b01565b6001600160a01b03811661204f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610423565b6103fd81612181565b6002600154141561207b5760405162461bcd60e51b815260040161042390612a0a565b600260015560005b81518110156121165781818151811061209e5761209e612bed565b602090810291909101015160405163055de27560e01b81523360048201526001600160a01b039091169063055de27590602401600060405180830381600087803b1580156120eb57600080fd5b505af11580156120ff573d6000803e3d6000fd5b50505050808061210e90612c19565b915050612083565b505060018055565b6040516001600160a01b038316602482015260448101829052611bcd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261220f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526122099085906323b872dd60e01b9060840161214a565b50505050565b6000612264826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122e19092919063ffffffff16565b805190915015611bcd57808060200190518101906122829190612ae4565b611bcd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610423565b60606122f084846000856122f8565b949350505050565b6060824710156123595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610423565b6001600160a01b0385163b6123b05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610423565b600080866001600160a01b031685876040516123cc9190612c4c565b60006040518083038185875af1925050503d8060008114612409576040519150601f19603f3d011682016040523d82523d6000602084013e61240e565b606091505b509150915061241e828286612429565b979650505050505050565b60608315612438575081611a7b565b8251156124485782518084602001fd5b8160405162461bcd60e51b81526004016104239190612c68565b6001600160a01b03811681146103fd57600080fd5b80151581146103fd57600080fd5b60008060006060848603121561249a57600080fd5b83356124a581612462565b92506020840135915060408401356124bc81612477565b809150509250925092565b600080604083850312156124da57600080fd5b82356124e581612462565b946020939093013593505050565b60006020828403121561250557600080fd5b8135611a7b81612462565b60005b8381101561252b578181015183820152602001612513565b838111156122095750506000910152565b60008151808452612554816020860160208601612510565b601f01601f19169290920160200192915050565b60018060a01b038151168252600060208201516060602085015261258f606085018261253c565b60409384015160ff16949093019390935250919050565b602081526000611a7b6020830184612568565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561268b57898403603f19018652825180516001600160a01b03168552888101518986015287810151888601526060808201519086015260809081015160a0918601829052805191860182905289019060c086019084905b808210156126765761266283855180516001600160a01b03168252602090810151910152565b928b0192918a01916001919091019061263c565b505096890196945050918701916001016125e1565b50919998505050505050505050565b6000806000604084860312156126af57600080fd5b83356126ba81612462565b9250602084013567ffffffffffffffff808211156126d757600080fd5b818601915086601f8301126126eb57600080fd5b8135818111156126fa57600080fd5b8760208260051b850101111561270f57600080fd5b6020830194508093505050509250925092565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561278a57888303603f190185528151805187855261276d88860182612568565b918901519489019490945294870194925090860190600101612749565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156127d7576127d7612798565b604052919050565b600067ffffffffffffffff8211156127f9576127f9612798565b5060051b60200190565b600082601f83011261281457600080fd5b81356020612829612824836127df565b6127ae565b82815260059290921b8401810191818101908684111561284857600080fd5b8286015b8481101561286c57803561285f81612462565b835291830191830161284c565b509695505050505050565b6000806040838503121561288a57600080fd5b823567ffffffffffffffff8111156128a157600080fd5b6128ad85828601612803565b92505060208301356128be81612477565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561291c5761290c84835180516001600160a01b03168252602090810151910152565b92840192908501906001016128e6565b5091979650505050505050565b60006020828403121561293b57600080fd5b8135611a7b81612477565b60006020828403121561295857600080fd5b813567ffffffffffffffff81111561296f57600080fd5b6122f084828501612803565b6000602080838503121561298e57600080fd5b825167ffffffffffffffff8111156129a557600080fd5b8301601f810185136129b657600080fd5b80516129c4612824826127df565b81815260059190911b820183019083810190878311156129e357600080fd5b928401925b8284101561241e5783516129fb81612462565b825292840192908401906129e8565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600e908201526d1a5b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b600060208284031215612a7b57600080fd5b8151611a7b81612462565b60208082526015908201527434b73b30b634b21039ba30b5b4b733903a37b5b2b760591b604082015260600190565b600060208284031215612ac757600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b600060208284031215612af657600080fd5b8151611a7b81612477565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215612b4857600080fd5b815167ffffffffffffffff80821115612b6057600080fd5b818401915084601f830112612b7457600080fd5b815181811115612b8657612b86612798565b612b99601f8201601f19166020016127ae565b9150808252856020828501011115612bb057600080fd5b612bc1816020840160208601612510565b50949350505050565b600060208284031215612bdc57600080fd5b815160ff81168114611a7b57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612c2d57612c2d612c03565b5060010190565b60008219821115612c4757612c47612c03565b500190565b60008251612c5e818460208701612510565b9190910192915050565b602081526000611a7b602083018461253c56fea26469706673582212207b3750ecd64cbc1cad81fa3cb1f69fcbc4569c71388fe23edf4c96886ff2d46464736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimRewards(address[])": {
        "params": {
          "stakingRewards": "The list of staking rewards"
        }
      },
      "exit(address[],bool)": {
        "params": {
          "stakingRewards": "The list of staking rewards",
          "toNative": "Unwrap to native token or not"
        }
      },
      "exitAll(bool)": {
        "params": {
          "toNative": "Unwrap to native token or not"
        }
      },
      "getRewardTokenInfo(address)": {
        "params": {
          "rewardToken": "The reward token"
        },
        "returns": {
          "_0": "The reward token info"
        }
      },
      "getStakingInfo()": {
        "returns": {
          "_0": "The list of staking info"
        }
      },
      "getUserClaimableRewards(address,address[])": {
        "params": {
          "account": "The account",
          "rewardTokens": "The list of reward tokens"
        },
        "returns": {
          "_0": "The list of user claimable rewards"
        }
      },
      "getUserStaked(address)": {
        "params": {
          "account": "The account"
        },
        "returns": {
          "_0": "The list of user staked info"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "seize(address,uint256)": {
        "params": {
          "amount": "The amount",
          "token": "The token"
        }
      },
      "stake(address,uint256)": {
        "params": {
          "amount": "The amount",
          "underlying": "The underlying token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(address,uint256,bool)": {
        "params": {
          "amount": "The amount",
          "stakingRewards": "The staking rewards",
          "toNative": "Unwrap to native token or not"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "TokenSeized(address,uint256)": {
        "notice": "Emitted when tokens are seized"
      }
    },
    "kind": "user",
    "methods": {
      "claimAllRewards()": {
        "notice": "Claim all rewards"
      },
      "claimRewards(address[])": {
        "notice": "Claim rewards by given staking rewards"
      },
      "exit(address[],bool)": {
        "notice": "Exit staking rewards"
      },
      "exitAll(bool)": {
        "notice": "Exit all staking rewards"
      },
      "getRewardTokenInfo(address)": {
        "notice": "Getthe reward token info"
      },
      "getStakingInfo()": {
        "notice": "Get all the staking info"
      },
      "getUserClaimableRewards(address,address[])": {
        "notice": "Get user claimable rewards"
      },
      "getUserStaked(address)": {
        "notice": "Get user staked info"
      },
      "seize(address,uint256)": {
        "notice": "Seize tokens in this contract."
      },
      "stake(address,uint256)": {
        "notice": "Mint and stake tokens into staking rewards"
      },
      "stakeNative()": {
        "notice": "Mint native and stake tokens into staking rewards"
      },
      "unstake(address,uint256,bool)": {
        "notice": "Unstake tokens from staking rewards and redeem"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1143,
        "contract": "contracts/staking-rewards/StakingRewardsHelper.sol:StakingRewardsHelper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1786,
        "contract": "contracts/staking-rewards/StakingRewardsHelper.sol:StakingRewardsHelper",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}